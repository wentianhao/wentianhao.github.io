<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>背包问题</title>
      <link href="2021/06/10/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>2021/06/10/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>背包问题是一类经典的动态规划问题，6月是leetcode的背包月，因此就最近做的几道背包题目，简单总结一下。</p><p>背包问题是一种组合优化的NP完全(NP-Complete,NPC)问题。问题描述：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，如何选择，才能使得物品的总价格最高。</p><p>背包问题一般有以下几种分类：</p><ul><li>01背包问题</li><li>完全背包问题</li><li>多重背包问题</li></ul><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划算法详解</title>
      <link href="2021/04/03/dp/"/>
      <url>2021/04/03/dp/</url>
      
        <content type="html"><![CDATA[<p>动态规划DP(Dynamic programming):通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法</p><p>DP 常适用于 有 <strong>重叠子问题</strong> 和 <strong>最优子结构性质</strong> 的问题，动态规划方法所耗时间往往低于朴素解法</p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>若要解一个给定的问题，需解其不同部分(即子问题)，再根据子问题的解以得到原问题的解。</p><span id="more"></span><h2 id="DP-需要注意的要素"><a href="#DP-需要注意的要素" class="headerlink" title="DP 需要注意的要素"></a>DP 需要注意的要素</h2><ol><li>明确dp二维数组表示的含义</li><li>base case</li><li>状态的转移： 对于回文/LCS(最长公共子序列)之类的问题则是考虑当前字串与已经计算过的字串之间的关系</li><li>由状态的转移来确定 loop的边界</li><li>由loop的边界打出表格，可得出最后一个dp的状态值，即结果。</li></ol><h2 id="LeetCode-1143-最长公共子序列"><a href="#LeetCode-1143-最长公共子序列" class="headerlink" title="LeetCode 1143.最长公共子序列"></a>LeetCode 1143.最长公共子序列</h2><blockquote><blockquote><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0</p></blockquote></blockquote><ol><li>对于s[1,…,i] t[1,…,j] LCS 长度为dp[i][j]</li><li>base case 一个字符串和自身没有子序列 dp[0][j] = dp[i][0] = 0  <pre class="language-java" data-language="java"><code class="language-java">s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">:</span>   dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">:</span>   dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre></li><li>dp[n][m]</li></ol><p>状态矩阵</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*              j       *  a  b  c  b  a    *  0  0  0  0  0  0    a  0  1  1  1  1  1    b  0  1  2  2  2  2i   c  0  1  2  3  3  3    b  0  1  2  3  4  4    c  0  1  2  3  4  4    b  0  1  2  3  4  4    a  0  1  2  3  4  5*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span><span class="token class-name">String</span> text1<span class="token punctuation">,</span> <span class="token class-name">String</span> text2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> text1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> text2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>text1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> text2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer<span class="token punctuation">.</span>Max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="LeetCode-115-不同的子序列"><a href="#LeetCode-115-不同的子序列" class="headerlink" title="LeetCode 115.不同的子序列"></a>LeetCode 115.不同的子序列</h2><blockquote><blockquote><p>给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。</p></blockquote></blockquote><ol><li>对于s[1,…,j] t[1,…,i] 在s的子序列中t出现的个数为dp[i][j]</li><li>base case t为空串时，dp[0][j] = 1; <pre class="language-java" data-language="java"><code class="language-java">s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">:</span>   dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">:</span>   dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre></li><li>dp[m][n]</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/****    *  b  a  b  g  b  a  g* *  1  1  1  1  1  1  1  1* b  0  1  1  2  2  3  3  3* a  0  0  1  1  1  1  4  4* g  0  0  0  0  1  1  1  5*/</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDistinct</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//初始化第一行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令：useradd</title>
      <link href="2021/03/29/useradd/"/>
      <url>2021/03/29/useradd/</url>
      
        <content type="html"><![CDATA[<h2 id="每天一个Linux命令：useradd"><a href="#每天一个Linux命令：useradd" class="headerlink" title="每天一个Linux命令：useradd"></a>每天一个Linux命令：useradd</h2><p>ubuntu创建新用户并赋予指定目录的相关权限</p><span id="more"></span><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> username   <span class="token comment"># 添加用户 username</span><span class="token function">passwd</span> username   <span class="token comment"># 输入密码</span><span class="token function">usermod</span> -s /bin/bash username  <span class="token comment"># 为该用户指定命令解释程序</span><span class="token function">usermod</span> -d /home/username  <span class="token comment"># 为该用户指定用户主目录</span><span class="token function">cat</span> /etc/passwd   <span class="token comment"># 查看用户属性</span></code></pre><p>赋予用户主目录下的读写权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> -R username:username /home/username<span class="token function">chmod</span> <span class="token number">755</span> /home/username</code></pre><p>赋予用户root权限</p><pre class="language-bash" data-language="bash"><code class="language-bash">visudo  <span class="token comment"># 打开 /etc/sudoers文件</span>username ALL <span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL <span class="token comment"># root下加入</span></code></pre><p>参考文献：<br><a href="https://www.jb51.net/article/175195.htm">https://www.jb51.net/article/175195.htm</a><br><a href="https://blog.csdn.net/jiangjiang_jian/article/details/81169258">https://blog.csdn.net/jiangjiang_jian/article/details/81169258</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习</title>
      <link href="2021/01/16/algo/"/>
      <url>2021/01/16/algo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据结构的存储方式"><a href="#一、数据结构的存储方式" class="headerlink" title="一、数据结构的存储方式"></a>一、数据结构的存储方式</h2><p>数据结构的存储方式只有两种：数组(顺序存储)和链表(链式存储)</p><p><strong>队列、栈</strong>这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容问题；用链表实现，需要更多的内存空间存储节点指针</p><p><strong>图</strong>的两种表达方式，邻接表就是链表，邻接矩阵是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，但如果图比较稀疏很耗费空间；邻接表比较节省空间，但很多操作的效率比不过邻接矩阵</p><p><strong>散列表</strong>通过散列函数把键映射到一个大数组里。解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些</p><p><strong>树</strong>，用数组实现就是<strong>堆</strong>，<strong>堆</strong>是完全二叉树，用数组存储不需要节点指针，操作比较简单；用链表实现就是很常见的树，因为不一定是完全二叉树，所以不适合用数组存储。在链表<strong>树</strong>结构之上，又衍生出各种巧妙的设计，比如二叉搜索树、AVL树、红黑树、区间树、B树等等</p><p><strong>数组</strong>:紧凑连续存储，可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间，但内存空间必须一次性分配够，如果需要扩容，则需重新分配一块更大的空间，再把数据全部复制过去，时间复杂度为O(N)；如果进行插入和删除操作，每次必须搬移后面的所有数据以保持连续，时间复杂度O(N)</p><p><strong>链表</strong>：元素不连续，靠指针指向下一个元素的位置，不存在扩容问题，如果知道某一元素的前驱和后驱，操作指针即可删除或插入元素，时间复杂度O(1)。因为存储空间不连续，无法根据索引算出对应元素地址，不能随机访问；由于每个元素必须存储前后元素位置的指针，会消耗更多的存储空间</p><h2 id="二、数据结构的基本操作"><a href="#二、数据结构的基本操作" class="headerlink" title="二、数据结构的基本操作"></a>二、数据结构的基本操作</h2><p>对于任何数据结构，其基本操作无非遍历+访问，再具体一点就是：增删改查</p><p>各种数据结构的遍历+访问两种形式：线性的和非线性的</p><p>线性就是<code>for/while</code>迭代为代表，非线性就是递归为代表</p><p>数组遍历框架，典型的线性迭代结构：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 迭代访问 arr[i]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>链表遍历框架，兼具迭代和递归结构：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*基本的单链表节点*/</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 迭代访问p.val</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 递归访问 head.val</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>二叉树遍历框架，典型的非线性递归遍历结构：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*基本的二叉树节点*/</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> left<span class="token punctuation">,</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>N叉树遍历框架：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*基本的N叉树节点*/</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> child<span class="token operator">:</span> root<span class="token punctuation">.</span>children<span class="token punctuation">)</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>N叉树的遍历又可以扩展为图的遍历，图就是好几个N叉树的结合体。若图出现环，则用布尔数组visited做标记</p><h2 id="算法刷题指南"><a href="#算法刷题指南" class="headerlink" title="算法刷题指南"></a>算法刷题指南</h2><p><strong>先刷二叉树</strong></p><p><strong>因为二叉树是最容易培养框架思维的，而且大部分算法技巧，本质上都是树的遍历问题。</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//前序遍历</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token comment">//中序遍历</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token comment">//后序遍历</span><span class="token punctuation">&#125;</span></code></pre><p>感谢<strong>labuladong</strong></p><p>参考:<br><a href="https://labuladong.gitbook.io/algo/">https://labuladong.gitbook.io/algo/</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown公式语法</title>
      <link href="2020/12/09/markdown%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/"/>
      <url>2020/12/09/markdown%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>记录markdown常用的公式语法</p><h2 id="markdown数学符号-amp-公式"><a href="#markdown数学符号-amp-公式" class="headerlink" title="markdown数学符号 &amp; 公式"></a>markdown数学符号 &amp; 公式</h2><span id="more"></span><table><thead><tr><th align="center">符号</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center">$\hat{x}$</td><td align="center"><code>\hat&#123;x&#125;</code></td></tr><tr><td align="center">$\tilde{x}$</td><td align="center"><code>\tilde&#123;x&#125;</code></td></tr><tr><td align="center">$\check{x}$</td><td align="center"><code>\check&#123;x&#125;</code></td></tr><tr><td align="center">$\grave{x}$</td><td align="center"><code>\grave&#123;x&#125;</code></td></tr><tr><td align="center">$\widehat{xyz}$</td><td align="center"><code>\widehat&#123;xyz&#125;</code></td></tr><tr><td align="center">$\widetilde{xyz}$</td><td align="center"><code>\widetilde&#123;xyz&#125;</code></td></tr><tr><td align="center">$\breve{y}$</td><td align="center"><code>\breve&#123;y&#125;</code></td></tr><tr><td align="center">$\acute{y}$</td><td align="center"><code>\acute&#123;y&#125;</code></td></tr><tr><td align="center">$\frac{7x+5}{1+y^2}$</td><td align="center"><code>\frac&#123;7x+5&#125;&#123;1+y^2&#125;</code></td></tr><tr><td align="center">$程序=\left{\begin{matrix} 数据结构 \ 算法 \end{matrix}\right.$</td><td align="center"><code>程序=\left\&#123;\begin&#123;matrix&#125; 数据结构 \\ 算法 \end&#123;matrix&#125;\right.</code></td></tr><tr><td align="center">$\left.\begin{matrix} 数据结构 \ 算法 \end{matrix}\right}=程序$</td><td align="center"><code>\left.\begin&#123;matrix&#125; 数据结构 \\ 算法 \end&#123;matrix&#125;\right\&#125;=程序</code></td></tr><tr><td align="center">$\sum_{v}$</td><td align="center"><code>\sum_v</code></td></tr><tr><td align="center">$\psi$</td><td align="center"><code>\psi</code></td></tr><tr><td align="center">$\Psi$</td><td align="center"><code>\Psi</code></td></tr><tr><td align="center">$\phi$</td><td align="center"><code>\phi</code></td></tr><tr><td align="center">$\Phi$</td><td align="center"><code>\Phi</code></td></tr><tr><td align="center">$\Gamma$</td><td align="center"><code>\Gamma</code></td></tr><tr><td align="center">$\gamma$</td><td align="center"><code>\gamma</code></td></tr><tr><td align="center">$\underset{i=0}{\sum}$</td><td align="center"><code>\underset&#123;i=0&#125;&#123;\sum&#125;</code></td></tr><tr><td align="center">$\ne$</td><td align="center"><code>\ne</code></td></tr><tr><td align="center">$\partial$</td><td align="center"><code>\partial</code></td></tr><tr><td align="center">$\sigma$</td><td align="center"><code>\sigma</code></td></tr><tr><td align="center">$\delta$</td><td align="center"><code>\delta</code></td></tr><tr><td align="center">$\alpha$</td><td align="center"><code>\alpha</code></td></tr><tr><td align="center">$\theta$</td><td align="center"><code>\theta</code></td></tr><tr><td align="center">$\lambda$</td><td align="center"><code>\lambda</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Joint Entity Disambiguation with local Neural Attention</title>
      <link href="2020/12/09/deepED/"/>
      <url>2020/12/09/deepED/</url>
      
        <content type="html"><![CDATA[<p>提出一种新的深度学习文档级实体消歧模型</p><h2 id="Key-components"><a href="#Key-components" class="headerlink" title="Key components"></a>Key components</h2><ul><li>Entity Embeddings：上下文单词和候选实体嵌入到同一公共向量空间</li><li>局部上下文的注意力机制</li><li>联合概率推理模型<span id="more"></span></li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><ul><li>实体嵌入</li><li>上下文注意力机制用于局部消歧</li><li>提出深度学习框架进行全局消歧</li></ul><h2 id="Local-Model"><a href="#Local-Model" class="headerlink" title="Local Model"></a>Local Model</h2><p><img src="https://whh.plus/images/LocalModel.png" alt="Local Model" loading="lazy"></p><p>mention-entity prior $\hat{p}(e|m)$ ：统计mention和entity hyperlink计数统计数据求平均概率(Wikipedia and YAGO dictionary)</p><p>soft Attention: $u(w)=max_{e∈\Gamma(m)}x_e^TAx_w$</p><p>hard Attention: $\overline{c}={w∈c|u(w)∈topR(u)},R\leq K$</p><p>weighted sum: $\beta(w)=\left{\begin{matrix}\frac{exp[u(w)]}{\sum_{v∈\overline{c}}exp[u(v)]}. \text{ }  if w∈\overline{c}\0   \text{ }     otherwise.\end{matrix}\right.$</p><p>$\beta$-weighted context-based entity-mention score ： $\Psi(e,c)=\sum_{w∈\overline{c}}\beta(w)x_e^TBx_w$</p><h2 id="Local-Score-Combination"><a href="#Local-Score-Combination" class="headerlink" title="Local Score Combination"></a>Local Score Combination</h2><p>$$\Psi(e,m,c)=f(\Psi(e,c),log\hat{p}(e|m))$$</p><h2 id="Document-Level-Deep-Model"><a href="#Document-Level-Deep-Model" class="headerlink" title="Document-Level Deep Model"></a>Document-Level Deep Model</h2><h3 id="CRF-Model"><a href="#CRF-Model" class="headerlink" title="CRF Model"></a>CRF Model</h3><p><img src="https://whh.plus/images/crf-lbp.png" alt="CRF Model" loading="lazy"><br>$g(e,m,c)=\sum_{i=1}^n\Psi_i(e_i)+\sum_{i&lt;j}\Phi(e_i,e_j)$<br>$$\Phi(e,e’)=\frac{2}{n-1}x_e^TCx_{e’}$$</p><h3 id="Differentiable-Inference"><a href="#Differentiable-Inference" class="headerlink" title="Differentiable Inference"></a>Differentiable Inference</h3><p>$m_{i-&gt;j}^{t+1}(e)=\underset{e’∈\Gamma(m_i)}{max}{\Psi_i(e’)+\Phi(e,e’)+\underset{k\ne{j}}{\sum}\overline{m}_{k-&gt;i}^t(e’)}$</p><p>$\overline{m}<em>{i-&gt;j}^t(e)=log[\delta*softmax(m</em>{i-&gt;j}^t(e))+(1-\delta)*exp(\overline{m}_{i-&gt;j}^{t-1}(e))]$</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python下载文件的N种方法</title>
      <link href="2020/11/20/Python%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>2020/11/20/Python%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>记录python下载文件的各种方法，从下载简单的小文件到用断点续传的方式下载大文件</p><span id="more"></span><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><p>使用Requests模块的get方法从url上下载文件，在python爬虫中经常使用它来下载简单的网页内容</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment"># 图片url</span>url <span class="token operator">=</span> <span class="token string">'https://cn.bing.com/th?id=OHR.DerwentIsle_EN-CN8738104578_400x240.jpg'</span><span class="token keyword">def</span> <span class="token function">requests_download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'pic_requests.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>wirte<span class="token punctuation">(</span>content<span class="token punctuation">)</span></code></pre><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>使用urllib模块的urlretrieve方法直接将url请求保存成文件</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token comment"># 图片url</span>url <span class="token operator">=</span> <span class="token string">'https://cn.bing.com/th?id=OHR.DerwentIsle_EN-CN8738104578_400x240.jpg'</span><span class="token keyword">def</span> <span class="token function">urllib_download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">'pic_urllib.jpg'</span><span class="token punctuation">)</span></code></pre><h2 id="urllib3"><a href="#urllib3" class="headerlink" title="urllib3"></a>urllib3</h2><p>urllib3是一个用于HTTP客户端的python模块，它使用连接池对网络进行请求访问</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">urllib3_download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建一个连接池</span>    poolManager <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    resp <span class="token operator">=</span> poolManager<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'pic_urllib3.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        resp<span class="token punctuation">.</span>release_conn<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="wegt"><a href="#wegt" class="headerlink" title="wegt"></a>wegt</h2><p>在Linux系统中有wegt命令，下载网上资源，python中也有对应的wegt模块，使用<code>pip install wegt</code> 安装</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wegt<span class="token comment"># 图片url</span>url <span class="token operator">=</span> <span class="token string">'https://cn.bing.com/th?id=OHR.DerwentIsle_EN-CN8738104578_400x240.jpg'</span><span class="token keyword">def</span> <span class="token function">wegt_download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    wegt<span class="token punctuation">.</span>download<span class="token punctuation">(</span>url<span class="token punctuation">,</span>out<span class="token operator">=</span><span class="token string">'pic_wegt.jpg'</span><span class="token punctuation">)</span></code></pre><p>OR <code>python -m wget https://cn.bing.com/th?id=OHR.DerwentIsle_EN-CN8738104578_400x240.jpg </code></p><h2 id="分块下载大文件"><a href="#分块下载大文件" class="headerlink" title="分块下载大文件"></a>分块下载大文件</h2><p>在文件比较大，电脑内存空间完全不够用的情况下，可用使用requests模块的流模式，默认情况下stream参数为False，文件过大会导致内存不足。stream参数为True的时候requests并不会立刻下载，只有在调用iter_content或者iter_lines遍历内容时下载</p><p>iter_content ：一块一块的遍历要下载的内容</p><p>iter_lines : 一行一行的遍历要下载的内容</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">stream_download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># vscode 客户端</span>    url <span class="token operator">=</span> <span class="token string">'https://vscode.cdn.azure.cn/stable/e5a624b788d92b8d34d1392e4c4d9789406efe8f/VSCodeUserSetup-x64-1.51.1.exe'</span>    <span class="token keyword">with</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> r<span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'vscode.exe'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            <span class="token comment"># chunk_size 指定写入大小 每次写入1024*1024 bytes</span>            <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> chunk<span class="token punctuation">:</span>                    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span></code></pre><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>在下载大文件时加上进度条美化下载界面，可实时知道下载网络速度和已经下载的文件大小，这里使用tqdm模块作为进度条显示，可使用<code>pip install tqdm</code>安装</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">def</span> <span class="token function">tqdm_download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://vscode.cdn.azure.cn/stable/e5a624b788d92b8d34d1392e4c4d9789406efe8f/VSCodeUserSetup-x64-1.51.1.exe'</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 获取文件大小</span>    file_size <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tdqm<span class="token punctuation">(</span>total<span class="token operator">=</span>file_size<span class="token punctuation">,</span>unit<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">,</span>unit_scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>unit_divisor<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token builtin">ascii</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>desc<span class="token operator">=</span><span class="token string">'vscode.exe'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bar<span class="token punctuation">:</span>        <span class="token keyword">with</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> r<span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'vscode.exe'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> chunk<span class="token punctuation">:</span>                        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                        bar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>tqdm 参数说明：</p><ul><li>total : bytes，整个文件的大小</li><li>unit=’B’ : 按 bytes 为单位计算</li><li>unit_scale=True : 以 M 为单位显示速度</li><li>unit_divisor=1024 : 文件大小和速度按 1024 除以，默认时按 1000 来除</li><li>ascii=True : 进度条的显示符号，用于兼容 windows 系统</li><li>desc=’vscode.exe’ : 进度条前面的文件名</li></ul><p>示例<br><img src="https://whh.plus/images/chunk.gif" alt="tqdm" loading="lazy"></p><h2 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h2><p>HTTP/1.1 在协议的请求头中增加了一个名为Range的字段域，Range字段域让文件从已经下载的内容开始继续下载</p><p>如果网站支持Range字段域请求相应的状态码为206(Partial Content)，否则为416(Requested Range not satisfiable)</p><p>Range的格式</p><pre class="language-bash" data-language="bash"><code class="language-bash">Range:<span class="token punctuation">[</span>unit<span class="token operator">=</span>first byte pos<span class="token punctuation">]</span> - <span class="token punctuation">[</span>last byte pos<span class="token punctuation">]</span>，即 Range <span class="token operator">=</span> 开始字节位置-结束字节位置，单位：bytes</code></pre><p>将Range加入到headers中</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">def</span> <span class="token function">resume_download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'https://vscode.cdn.azure.cn/stable/e5a624b788d92b8d34d1392e4c4d9789406efe8f/VSCodeUserSetup-x64-1.51.1.exe'</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 获取文件大小</span>    file_size <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    file_name <span class="token operator">=</span> <span class="token string">'vscode.exe'</span>    <span class="token comment"># 如果文件存在获取文件大小，否则从0开始下载</span>    first_byte <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        first_byte <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>    <span class="token comment"># 判断是否已经下载完成</span>    <span class="token keyword">if</span> first_byte <span class="token operator">>=</span> file_size<span class="token punctuation">:</span>        <span class="token keyword">return</span>        <span class="token comment"># Range 加入请求头</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Range"</span> <span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"bytes=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>first_byte<span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_size<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>    <span class="token comment"># 加入一个initial 参数</span>    <span class="token keyword">with</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>file_size<span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">,</span> initial<span class="token operator">=</span>first_byte<span class="token punctuation">,</span> unit_scale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> unit_divisor<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token builtin">ascii</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> desc<span class="token operator">=</span>file_name<span class="token punctuation">)</span> <span class="token keyword">as</span> bar<span class="token punctuation">:</span>        <span class="token comment"># 加入 headers 参数</span>        <span class="token keyword">with</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> r<span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span><span class="token string">'ab'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                <span class="token keyword">for</span> chunk <span class="token keyword">in</span> r<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> chunk<span class="token punctuation">:</span>                        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                        bar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>示例<br><img src="https://whh.plus/images/tqdm.gif" alt="tqdm" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua学习</title>
      <link href="2020/11/05/Lua/"/>
      <url>2020/11/05/Lua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能</p></blockquote><span id="more"></span><h2 id="Lua-数组"><a href="#Lua-数组" class="headerlink" title="Lua 数组"></a>Lua 数组</h2><p>Lua索引值是从1开始，如果索引没有值返回nil,还可以以负数为索引值</p><pre class="language-lua" data-language="lua"><code class="language-lua">array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Lua"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token keyword">do</span>    <span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span></code></pre><p>output:</p><pre class="language-Lua" data-language="Lua"><code class="language-Lua">nilLuahello</code></pre><p>Python 列表 索引值从0开始，负数为倒数索引</p><h2 id="Lua-正则表达式"><a href="#Lua-正则表达式" class="headerlink" title="Lua 正则表达式"></a>Lua 正则表达式</h2><table><thead><tr><th align="center">元字符</th><th align="center">描述</th><th align="center">表达式实例</th><th align="center">完整匹配的字串</th></tr></thead><tbody><tr><td align="center">字符</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">普通字符</td><td align="center">除去%.<a href=""></a>^$*+-?的字符，匹配字符本身</td><td align="center">Wenh</td><td align="center">Wenh</td></tr><tr><td align="center">.</td><td align="center">匹配任意字符</td><td align="center">We.h</td><td align="center">Wenh</td></tr><tr><td align="center">%</td><td align="center">转义字符，改变后一个字符的原有意思。当后面的接的是特殊字符时，将还原特殊字符的原意。%和一些特定的字母组合构成了lua的预定义字符集。%和数字1~9组合表示之前捕获的分组</td><td align="center">K%wna%%na%%(a)n%1</td><td align="center">K%wna%%na%%(a)n%1</td></tr><tr><td align="center">%s</td><td align="center">空白符</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%p</td><td align="center">标点字符</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%c</td><td align="center">控制字符</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%d</td><td align="center">数字</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%x</td><td align="center">十六进制数字</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%z</td><td align="center">代表0的字符</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%a</td><td align="center">字母</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%l</td><td align="center">小写字母</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%u</td><td align="center">大写字母</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">%w</td><td align="center">字母和数字</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>上面字符类的大写形式表示小写所代表的集合的补集。 例如：<code>%A</code>为非字母的字符</p><table><thead><tr><th align="center">模式修饰符</th><th align="center">含义</th></tr></thead></table><ul><li>| 匹配前一字符1次或多次</li></ul><ul><li>| 匹配前一字符0次或多次;最长匹配 – 先尽可能长地把本次匹配模式走完,再继续下一个模式,</li></ul><ul><li>| 匹配前一字符0次或多次;最短匹配  – 本次匹配模式每走一步,就考查下一个模式能否进入.<br>? |  匹配前一字符0次或1次<br>^ | 匹配字符串开头<br>$ | 匹配字符串结尾</li></ul>]]></content>
      
      
      <categories>
          
          <category> Lua </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP</title>
      <link href="2020/10/24/AOP/"/>
      <url>2020/10/24/AOP/</url>
      
        <content type="html"><![CDATA[<h2 id="AOP基本概念"><a href="#AOP基本概念" class="headerlink" title="AOP基本概念"></a>AOP基本概念</h2><blockquote><blockquote><p>AOP:Aspect Oriented Programming 面向切面编程，在程序开发中主要用来解决系统层面上的问题，比如日志、事务、权限等，Struts2的拦截器设计就是基于AOP思想</p></blockquote></blockquote><ul><li>在不改变原来逻辑的基础上，增加一些额外的功能。代理也是这个功能，读写分离也能用AOP来做</li><li>AOP 是 OOP(Object Oriented Programming,面向对象编程)的补充和完善。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boosting Entity Linking Performance by Leveraging Unlabeled Documents</title>
      <link href="2020/10/23/EntityUnlabe/"/>
      <url>2020/10/23/EntityUnlabe/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>$MAP$: Maximum a posteriori  最大后验概率预测一个“最佳”参数，从而得到变量的分布</p><p>$LBP$ ： loopy belief propagation 循环置信度传播</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argparse基本用法</title>
      <link href="2020/10/21/argparse%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>2020/10/21/argparse%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>argparse 是 python自带的命令行参数解析包，用来方便读取命令行参数</p><span id="more"></span><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li>导入argparse包</li><li>利用ArgumentParser类生成parser对象，description可为空</li><li>通过add_argument函数新增参数。’-n’和’–name’表示同一参数，’default’表示运行时若没有提供参数，则当默认值</li><li>parse_args获取解析的参数</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'what'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-n'</span><span class="token punctuation">,</span><span class="token string">'--name'</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">'WEN'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-y'</span><span class="token punctuation">,</span><span class="token string">'--year'</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token string">'20'</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>name  <span class="token operator">=</span> args<span class="token punctuation">.</span>nameyear <span class="token operator">=</span> args<span class="token punctuation">.</span>year<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello &#123;&#125; &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行<code>python test.py</code></p><p>结果</p><pre class="language-bash" data-language="bash"><code class="language-bash">Namespace<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'WEN'</span>, <span class="token assign-left variable">year</span><span class="token operator">=</span><span class="token string">'20'</span><span class="token punctuation">)</span>Hello WEN <span class="token number">20</span></code></pre><p>运行<code>python test.py -n LI -y 31</code></p><p>结果</p><pre class="language-bash" data-language="bash"><code class="language-bash">Namespace<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'LI'</span>, <span class="token assign-left variable">year</span><span class="token operator">=</span><span class="token string">'31'</span><span class="token punctuation">)</span>Hello LI <span class="token number">31</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令：top</title>
      <link href="2020/10/20/top/"/>
      <url>2020/10/20/top/</url>
      
        <content type="html"><![CDATA[<h2 id="每天一个Linux命令：top"><a href="#每天一个Linux命令：top" class="headerlink" title="每天一个Linux命令：top"></a>每天一个Linux命令：top</h2><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。下面详细介绍它的使用方法。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定.</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Attention Is All You Need</title>
      <link href="2020/10/10/Attention/"/>
      <url>2020/10/10/Attention/</url>
      
        <content type="html"><![CDATA[<p><img src="https://whh.plus/images/attention.png" alt="attention" loading="lazy"></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>传统的基于RNN的Seq2Seq模型难以处理长序列的句子，无法实现并行，还面临对齐的问题，本文提出Attention机制，加入Attention的Seq2Seq模型在各个任务上都有显著提升，创新点在于抛弃传统的Encoder-Decoder模型必须结合CNN或RNN的固有模式，只用Attention机制。</p><span id="more"></span><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>传统的编码器解码器一般使用RNN，这也是在机器翻译中最经典的模型，但RNN本身也存在局限，这类模型的发展大多从三个方面入手：</p><ul><li>input的方向性：单向或双向</li><li>深度： 单层或多层</li><li>类型：RNN，LSTM或GRU</li></ul><p>由于无论输入如何变化，encoder给出的都是一个固定维数的向量，存在信息损失；在生成文本时，生成每个词所用到的语义向量都是一样的，这显然过于简单。</p><p>为解决上述问题，引入Transformer的概念，整个网络结构完全是由Attention机制组成，Attention机制是将单个序列的不同位置联系起来计算序列表示的一种注意机制。</p><p><img src="https://whh.plus/images/attention.jpg" alt="Attention" loading="lazy"></p><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><blockquote><p>Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequence aligned RNNs or convolution。</p></blockquote><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>先看看总体的结构(以论文中的机器翻译为例)</p><p><img src="https://whh.plus/images/theTransformer.png" alt="Transformer" loading="lazy"></p><p>Transformer本质是一个Encoder-Decoder的结构</p><p><img src="https://whh.plus/images/Thetransformer1.png" alt="Transformer1" loading="lazy"></p><p>编码器和解码器都是由六个部分组成的，编码器的输出作为解码器的输入</p><p><img src="https://whh.plus/images/Thetransformer2.png" alt="Transformer2" loading="lazy"></p><p>每个encoder中有self-attention和feed forward neural network，数据先经过self-attention模块，得到一个加权之后的特征向量$Z$，即$Attention(Q,K,V)$</p><p>$Attention(Q,K,V)=softmax(\frac{QK^T}{\sqrt{d_k}})V$</p><p>然后送入前馈神经网络，前馈神经网络有两层，第一层的激活函数是Relu，第二层的激活函数为线性激活函数，表示为：<br>$$FFN(Z)=max(0,ZW_1+b_1)W_2+b_2$$</p><p>Encoder结构如下：<br><img src="https://whh.plus/images/encoder.png" alt="encoder" loading="lazy"></p><p>Decoder的结构，相较于Encoder，多了个Encoder-Decoder Attention，两个Attention分别用于计算输入和输出的权值。</p><ul><li>Self-Attention : 当前翻译和已经翻译的前文之间的关系</li><li>Encoder-Decoder Attention : 当前翻译和编码的特征向量之间的关系</li></ul><p>Decoder结构如下：<br><img src="https://whh.plus/images/decoder.png" alt="decoder" loading="lazy"></p><h3 id="输入编码"><a href="#输入编码" class="headerlink" title="输入编码"></a>输入编码</h3><p>上面说明的是主要的网络框架，现在介绍数据输入。一般使用嵌入算法把每个输入字转化成向量<br><img src="https://whh.plus/images/embedding.png" alt="embedding" loading="lazy"></p><p>词嵌入的维度$d_{model}=512$，嵌入单词到输入序列，每个单词都会输入到每个编码器的两层<br><img src="https://whh.plus/images/encoder1.png" alt="encoder" loading="lazy"><br>Transform的关键特性，每个位置的词仅流过自己的编码器路径。self-attention中这些路径两两之间相互依赖，但前馈层没有这些依赖，因此各种路径在流过前馈层时并行执行。</p><h4 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h4><p>一个向量序列作为Encoder的输入，将向量传入self-attention处理，进入FFNN，然后再将输出向上传到下一个Encoder<br><img src="https://whh.plus/images/encoder2.png" alt="encoder" loading="lazy"></p><h3 id="self-attention"><a href="#self-attention" class="headerlink" title="self-attention"></a>self-attention</h3><p>self-attention是Transform最核心内容。Attention的核心是<strong>输入向量的每一个单词学习一个权重</strong></p><p>例如：</p><blockquote><p>The animal didn’t cross the street because it was too tired</p></blockquote><p>加权后得到类似如下加权情况：</p><p><img src="https://whh.plus/images/attention1.png" alt="attention" loading="lazy"></p><p>当模型处理单词“it”时，self-attention允许将“it”和“animal”联系起来。当模型处理每个位置的词时，self-attention允许模型将句子的其他位置信息作为辅助线索来更好的编码当前词。</p><p>当编码“it”时(编码器的最后层输出)，部分attention集中于“the animal”，并将其表示合并进入到“it”的编码中</p><p><a href="https://colab.research.google.com/github/tensorflow/tensor2tensor/blob/master/tensor2tensor/notebooks/hello_t2t.ipynb">Tensor2Tensor notebook</a></p><h4 id="self-attention细节"><a href="#self-attention细节" class="headerlink" title="self-attention细节"></a>self-attention细节</h4><p>根据编码器的输入向量。生成三个向量，query-vec,key-vec，value-vec，生成方法为分别乘以三个矩阵，这些矩阵在训练过程中需要学习。【不是每个词向量独享3个矩阵，而是所有输入共享3个转换矩阵；权重矩阵是基于输入位置的转换矩阵；】新向量的维度比输入词向量的维度要小(512-&gt;64)，并不是必须要小，是为了让多头attention的计算更稳定<br><img src="https://whh.plus/images/QKV.png" alt="QKV" loading="lazy"></p><p>$$Query_{vec}=W_Q*q_1$$</p><p>$$Key_{vec}=W_K*k_1$$</p><p>$$Values_{vec}=W_V*v_1$$</p><p><img src="https://whh.plus/images/QKV1.png" alt="QKV" loading="lazy"></p><p>Attention计算过程</p><ul><li>将单词转化为嵌入向量(Embedding)</li><li>根据嵌入向量得到三个输入向量$q,k,v$</li><li>为每个向量计算一个score，$Q$与所有词的$K$以此点积得到</li><li>为了梯度的稳定，Transformer使用score归一化，即$/\sqrt{d_k}$</li><li>对score进行softmax激活函数</li><li>softmax点乘value值$v$，得到加权的每个输入向量评分$v$(scaled Dot-Product Attention)</li><li>相加之后得到最终输入结果</li></ul><p><img src="https://whh.plus/images/computeAttention.png" alt="Self-Attention计算示例图" loading="lazy"><br>$$Attention(Q,K,V)=softmax(\frac{QK^T}{\sqrt{d_k}})V $$</p><p><img src="https://whh.plus/images/softmax.png" alt="Self-Attention矩阵表示" loading="lazy"></p><h4 id="残差"><a href="#残差" class="headerlink" title="残差"></a>残差</h4><p>在self-attention需要强调的最后一点是采用了残差网络中的short-cut结构，目的是为了解决深度学习中的退化问题。</p><p><img src="https://whh.plus/images/short-cut.png" alt="Self-Attention中的short-cut连接" loading="lazy"></p><p>向量和self-attention的相关图层可视化如下：</p><p><img src="https://whh.plus/images/short-cut1.png" alt="Self-Attention中的short-cut连接" loading="lazy"></p><p>Transformer可视化如下图：</p><p><img src="https://whh.plus/images/transformer1.png" alt="Transformer" loading="lazy"></p><h2 id="Multi-Head-Attention"><a href="#Multi-Head-Attention" class="headerlink" title="Multi-Head Attention"></a>Multi-Head Attention</h2><p>Multi-Head Attention相当于8个不同的self-attention的集成</p><ul><li>将数据X分别输入到8个self-attention中，得到8个加权后的特征矩阵<br><img src="https://whh.plus/images/multi-head1.png" alt="第一步" loading="lazy"></li><li>将8个矩阵按列拼成一个大的特征矩阵<br><img src="https://whh.plus/images/multi-head2.png" alt="第二步" loading="lazy"></li><li>特征矩阵经过一层全连接后得到输出$Z$</li></ul><p>整个过程：</p><p><img src="https://whh.plus/images/multiAttention.png" alt="Multi-Head Attention" loading="lazy"></p><p>同Self-Attention一样，Mukti-Head Attention也加入了short-cut机制</p><p>现在加入Attention heads后，重新看下当编码“it”时，哪些attention head会被集中<br><img src="https://whh.plus/images/multi-head3.png" alt="it" loading="lazy"></p><p>编码“it”时，一个attention head集中于“the animal”，另一个head集中于“tired”</p><h2 id="Positional-Encoding"><a href="#Positional-Encoding" class="headerlink" title="Positional Encoding"></a>Positional Encoding</h2><p>Transformer模型没有捕捉顺序序列的能力，无论句子怎么打乱，得到的结果都是类似的。为了解决这个问题，论文提出位置编码概念。</p><p>位置编码常见模式有两种：A.根据数据学习 B.自己设计编码规则。论文作者采用第二种方式，通常位置编码的长度为$d_{model}$的特征向量，便于和词向量进行单位相加<br><img src="https://whh.plus/images/position.png" alt="位置编码" loading="lazy"></p><p>$$PE(pos,2i)=sin\frac{pos}{10000^{\frac{2i}{d_{model}}}}$$</p><p>$$PE(pos,2i+1)=cos\frac{pos}{10000^{\frac{2i}{d_{model}}}}$$</p><p>$pos$ : 单词的位置</p><p>$i$ : 单词的维度</p><p><img src="https://whh.plus/images/transformer.png" alt="Transformer" loading="lazy"><em>模型架构图</em></p><p><strong>参考文献</strong><br>1.<a href="https://zhuanlan.zhihu.com/p/75591049?from_voters_page=true">The Illustrated Transformer</a><br>2.<a href="https://www.cnblogs.com/zhanghaiyan/p/11079504.html">Attention is all you need-详解Transformer</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器后台运行python脚本</title>
      <link href="2020/10/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cpython%E8%84%9A%E6%9C%AC/"/>
      <url>2020/10/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cpython%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>服务器运行python</p><pre class="language-bash" data-language="bash"><code class="language-bash">python xx.py</code></pre><span id="more"></span><p>后台运行python</p><p>&amp; 符号 代表 后台运行，如果用户登出后，脚本也就自动退出了</p><pre class="language-bash" data-language="bash"><code class="language-bash">python xx.py <span class="token operator">&amp;</span></code></pre><p>nohup 保证了用户登出之后，脚本还会继续后台运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> python xxx.py <span class="token operator">&amp;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> python xx.py <span class="token operator">></span> /<span class="token environment constant">PATH</span>/run.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span></code></pre><p>0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) </p><p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到run.log文件中。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然语言处理入门</title>
      <link href="2020/09/27/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8/"/>
      <url>2020/09/27/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="新手上路"><a href="#新手上路" class="headerlink" title="新手上路"></a>新手上路</h2><p><strong>词法分析</strong> ：主要任务是将文本分割为有意义的词语(<strong>中文分词</strong>)，确定每个词语的类别和浅层的歧义消除(<strong>词性标注</strong>)，并且识别出一些较长的专有名词(<strong>命名实体识别</strong>)</p><p><strong>句法分析</strong> ：<strong>词法分析</strong>只能得到零散的词汇信息，<strong>句法分析</strong>需要得到句子的主谓宾结构得到语法信息</p><p><strong>语义分析</strong> ：侧重语义而非语法，包括<strong>词义消歧</strong>(确定一个词在语境中的含义，而不是简单的词性)、<strong>语义角色标注</strong>(标注句子中的谓语与其他成分的关系)、<strong>语义依存分析</strong>(分析句子中词语之间的语义关系)</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notebook嵌入Hexo博客</title>
      <link href="2020/09/25/Notebook%E5%B5%8C%E5%85%A5Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/09/25/Notebook%E5%B5%8C%E5%85%A5Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="因"><a href="#因" class="headerlink" title="因"></a>因</h2><p>由于最近在notebook上学pytorch，之前就觉得notebook来写博客贼棒，然后就想着把pytorch的学习过程给完整的在hexo博客上展示出来，记录一下</p><span id="more"></span><h2 id="使用github-nbviewer分享notebook"><a href="#使用github-nbviewer分享notebook" class="headerlink" title="使用github+nbviewer分享notebook"></a>使用github+nbviewer分享notebook</h2><p>Jupyter的实例Jupyter的.ipynb文件显示加载Hexo个人博客静态页面中嵌入Jupyter</p><p>1.将ipynb文件发布到GitHub</p><p>过程不赘述，若不会百度之</p><p>2.将GitHub上的分享链接发布到<a href="https://nbviewer.jupyter.org/">nbviewer</a></p><p>ex: <a href="https://github.com/wentianhao/wentianhao.github.io/blob/master/notebooks/pytorch.ipynb">pytorch学习笔记</a> </p><p><img src="https://whh.plus/images/nbviewer.jpg" alt="nbviewer" loading="lazy"></p><p>GO! 即可在线显示</p><p>3.Hexo个人博客静态页面中嵌入Jupyter</p><p>由于Markdown能够支持html语法，所以，稍微调整一下高度和宽度，就能够适应博客的页面。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://nbviewer.jupyter.org/github/wentianhao/wentianhao.github.io/blob/master/notebooks/pytorch.ipynb<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>570<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span> </code></pre><p>效果如下:</p><iframe src="https://nbviewer.jupyter.org/github/wentianhao/wentianhao.github.io/blob/master/notebooks/pytorch.ipynb" width="570" height="2000"></iframe> <p>参考文章:</p><p>1.<a href="https://cloud.tencent.com/developer/article/1471240">Jupyter notebook简介及嵌入Hexo博客中</a></p><p>2.<a href="https://www.jianshu.com/p/ff48ea53b78a">使用github+nbviewer分享notebook结果</a></p>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter notebook </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch学习笔记</title>
      <link href="2020/09/25/pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/09/25/pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>pytorch 是一个基于python的科学计算包</p><span id="more"></span><h2 id="Tensors（张量）"><a href="#Tensors（张量）" class="headerlink" title="Tensors（张量）"></a>Tensors（张量）</h2><p>Tensors类似NumPy的ndarrays</p><iframe src="https://nbviewer.jupyter.org/github/wentianhao/wentianhao.github.io/blob/master/notebooks/pytorch.ipynb" width="300" height="1500"></iframe> ]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于注意力机制的问句实体链接</title>
      <link href="2020/09/21/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6%E7%9A%84%E9%97%AE%E5%8F%A5%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5/"/>
      <url>2020/09/21/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6%E7%9A%84%E9%97%AE%E5%8F%A5%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p><strong>基于注意力机制的问句实体链接</strong></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><p>问句实体链接不仅需要大量的数据处理和特征选择工作，而且容易形成错误积累，降低链接效果。针对这种情况，文中提出基于注意力机制的编码器-解码器问句实体链接模型。模型使用双向的长短期记忆网络编码问句，经过注意力机制解码，生成对应的实体指称和消歧信息输出，最后链接到知识库实体。在有关汽车领域车系产品问句好热实体数据集上的实验表明，文中模型仅利用较少的上下文信息便可取得良好效果。</p><p><strong>关键词</strong> ：问句实体链接；注意力机制；编码器-解码器；长短期记忆网络；生成模型</p><span id="more"></span><p>问句实体链接是问答系统的一个重要步骤，传统的问句实体链接方法主要通过两个步骤完成，命名实体识别(Named Entity Recognition,NER)和实体链接(Entity Linking)</p><p>命名实体识别最初主要是基于规则的方法：隐马尔可夫模型(Hidden Markov Models,HMM)、最大熵马尔可夫模型(Maximum Entropy Markov Models,MEMM)、条件随机场(Conditional Random Fields,CRF)、支持向量机(Support Vector Machines,SVM)、决策树(Decision Tree,DT)和长短期记忆网络-条件随机场(Long Short-Term Memory-Conditional Random Field,LSTM-CRF)等</p><p>基于注意力机制(Attention Mechanism,AM) ：通过对输入设置不同的权重，捕获其中的关键对齐信息。</p><p><strong>问句和其链接到的实体具有明显的对齐关系，本文将问句实体链接归纳为具有对齐关系的端到端过程，避免传统方法中先进行命名实体识别，再进行实体链接的处理步骤，从而避免其中可能的错误传递累计情况，大幅减少数据处理的工作</strong></p><h2 id="基于注意力机制的Encoder-Deconder"><a href="#基于注意力机制的Encoder-Deconder" class="headerlink" title="基于注意力机制的Encoder-Deconder"></a><strong>基于注意力机制的Encoder-Deconder</strong></h2><p>Encoder部分 ：对于输入序列$x=(x_1,x_2,…,x^{T_x}),x_i∈R^m$，$m$为输入字典的大小，采用One-Hot编码时也是每个字向量的维度，$T_x$为输入序列的长度。</p><p>通常使用循环神经网络(Recurrent Neural Network,RNN)进行编码处理 ：$h_t=f(x_t,h_{t-1})$，$h_t∈R^n$表示RNN Encoder中$t$时刻的隐藏状态，$f$表示非线性函数，$n$表示编码器隐藏层单元数量。</p><p>本文的Encoder使用双向LSTM(Bidirectional LSTM,Bi-LSTM)作为函数$f$</p><p>Decoder部分 ：AM首先计算第$j$时刻输入$h_j$与第$t$时刻隐藏层状态$s_{t-1}$的对齐关系得分$e_{tj}$:<br>$$e_{tj}=a(s_{t-1},h_j)=v_a^Ttanh(W_as_{t-1}+U_ah_j)$$</p><p>$h_j$的权重$\alpha_{tj}$为：<br>$$\alpha_{tj}=\cfrac{exp(e_{tj})}{\sum_{k=1}^{T_x}exp(e_{tk})}$$</p><p>求出权重$\alpha_{tj}$，即可计算所有Encoder隐藏层输出$h_{j}$的加权和，构成上下文向量$c_t$:<br>$$c_t=\sum_{j=1}^{T_x}\alpha_{tj}h_j$$</p><h2 id="基于注意力机制的问句实体链接"><a href="#基于注意力机制的问句实体链接" class="headerlink" title="基于注意力机制的问句实体链接"></a><strong>基于注意力机制的问句实体链接</strong></h2><p>数据预处理阶段 ：将问句进行去停用词处理，然后在训练集数据上进行字级别的适配，生成字典。</p><p>字典的意义 ：赋予单个字一个唯一的索引值，方便后续模型将输入问句和输出序列转换为字的索引序列。</p><p><img src="https://whh.plus/images/fcopm.png" alt="模型流程图" loading="lazy"><em>模型流程图</em></p><ul><li>将问句按字典的索引转换为整数序列，为了减小内存开销，每次取一批的问句转换为One-Hot编码</li><li>再使用Bi-LSTM作为编码器，将前向和后向隐藏层的输出提供给AM解码器解码，通过选取最大值的下标索引将解码输出转换为整数序列，在字典中查找得出生成的实体指称，冰去除结束符和占位符</li><li>最后直接与知识库实体名和后缀匹配进行实体链接</li></ul><h2 id="实验及结果分析"><a href="#实验及结果分析" class="headerlink" title="实验及结果分析"></a><strong>实验及结果分析</strong></h2><p>实验数据集 ：通过网络收集的汽车领域问句和车系实体数据，包含318927条问句，知识库中车系实体共1901种</p><p>评价方法 ：准确率$P$、召回率$R$及$F1$值 </p><p>实验结果 ：<br><img src="https://whh.plus/images/result.png" alt="实验结果" loading="lazy"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>基于注意力机制的问句实体链接模型，将问句实体链接抽象为端到端的类似机器翻译问题，避免传统方式先进行命名实体识别，再进行实体链接带来的数据处理繁琐、特征难以提取和选择、错误累计等诸多缺点。不足是内存占用较大，仅能处理问句中只存在一个实体指称的情况，后续研究可结合知识库实体上下文信息，改进编码方式，降低内存开销，改进模型，使之可以处理问句中存在多个实体指称的情况</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学之美</title>
      <link href="2020/09/21/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/"/>
      <url>2020/09/21/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单即是美</p></blockquote><h2 id="1-文字和语言-vs-数字和信息"><a href="#1-文字和语言-vs-数字和信息" class="headerlink" title="1.文字和语言 vs 数字和信息"></a><strong>1.文字和语言 vs 数字和信息</strong></h2><p><em>文字和语言与数学，从产生起原本就有相通性，虽然它们的发展一度分道扬镳，但是最终还是能走到一起。</em></p><p>冷知识 ：阿拉伯数字不是阿拉伯人发明的，而是印度人发明的</p><span id="more"></span><ul><li>通信的原理和信息传播的模型</li><li>(信源)编码和最短编码</li><li>解码的规则，语法</li><li>聚类</li><li>校验位</li><li>双语对照文本，语料库和机器翻译</li><li>多义性和利用上下文消除歧义性</li></ul><h2 id="2-自然语言处理"><a href="#2-自然语言处理" class="headerlink" title="2.自然语言处理"></a><strong>2.自然语言处理</strong></h2><p><em>人类对机器理解自然语言的认识走了一条大弯路。早期的研究集中采用基于规则的方法，虽然解决了一些简单的问题，但是无法从根本上将自然语言理解实用化。直到20多年后，人们开始尝试用基于统计的方法进行自然语言处理，才有了突破性进展和实用的产品。</em></p><h2 id="3-统计语言模型"><a href="#3-统计语言模型" class="headerlink" title="3.统计语言模型"></a><strong>3.统计语言模型</strong></h2><p>统计语言模型是自然语言处理的基础</p><p><strong>To Be Continued…</strong></p><p>模型$S=w_1,w_2,…,w_n$,利用条件概率，S这个序列出现的概率等于每个词出现的条件概率相乘。</p><p>$$P(S)=P(w_1,w_2,…,w_n)=p(w_1)<em>p(w_2|w_1)</em>…*p(w_n|w_1,w_2,…,w_{n-1})$$</p><p>涉及变量越多，可能性越小，越难估算</p><p>马尔可夫假设：假设任意一个词$w_i$出现的概率只同它前面的词$w_{i-1}$有关</p><p>统计语言模型的二元模型：<br>$$P(S)=p(w_1)*p(w_2|w_1)<em>p(w_3|w_2)</em>…<em>p(w_i|w_{i-1})</em>…*p(w_n|w_{n-1})$$</p><p>$p(w_i|w_{i-1})=$</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于双词主题模型的半监督实体消歧方法研究</title>
      <link href="2020/09/21/%E5%9F%BA%E4%BA%8E%E5%8F%8C%E8%AF%8D%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AE%9E%E4%BD%93%E6%B6%88%E6%AD%A7%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/"/>
      <url>2020/09/21/%E5%9F%BA%E4%BA%8E%E5%8F%8C%E8%AF%8D%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AE%9E%E4%BD%93%E6%B6%88%E6%AD%A7%E6%96%B9%E6%B3%95%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>基于双词主题模型的半监督实体消歧方法研究</strong></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><p>针对实体上下文信息主题漂移问题，提出一种基于双词主题模型的实体消歧方法。方法考虑到实体在一定语义环境下具有不同的主题，且在同一文档中同时出现的其他实体在一定程度上能够帮助待消歧实体确定所指代内容，利用命名实体构建双词的思想，将协同实体关系融合到主题模型中，并在此基础上利用Wikipedia知识库，进行半监督消歧。</p><p><strong>关键词</strong> ：实体消歧；Wikipedia；双词主题模型</p><span id="more"></span><p>现有研究在对实体协同作用的分析时，并未考虑到随着实体主题迭代出现的主题漂移现象，从而导致主题模型的精度降低</p><p>本文针对全局主题信息漂移问题，采用双词主题模型(Biterm Topic Modeling,BTM)，结合Wikipedia知识库中的实体页面，提出基于BTM的半监督命名实体消歧算法。该算法利用Wikipedia实体摘要信息(实体页面)，构建双词集合并赋予实体主题标签，且保证双词中至少有一个为实体词，有效降低主题漂移现象，提高主题模型的精度，从而改善实体消歧效果。</p><h2 id="BTM主题模型"><a href="#BTM主题模型" class="headerlink" title="BTM主题模型"></a><strong>BTM主题模型</strong></h2><p>BTM是一种短文本主题概率生成模型。该模型针对短文本主题模型中出现的数据稀疏的问题，通过建立共现词组合(双词)来改进传统的LDA主题模型，提高主题中词聚合程度，有效改善短文本中主题模型的性能</p><p>双词 ：同一文本中同时出现的无序词对。</p><p>核心思想 ：两个词共同出现的频率越高，则双词属于同一个主题的可能性越大。</p><p>模型假设 ：双词中的每个词都独立的从一个主题中生成，且该主题从一个全局语料库的主题分布中生成</p><h2 id="消歧算法模型"><a href="#消歧算法模型" class="headerlink" title="消歧算法模型"></a><strong>消歧算法模型</strong></h2><p>双词模型通过构建词对(例如：词“哥伦布”可以表示航海家、城市、演员等，若不利用上下文信息，很难确定指代的实体，如果文本中词“哥伦布”附近出现词“海洋”/“船只”，则基本可以确定指称项“哥伦布”表示航海家哥伦布)，首先将上下文信息以一种词联合的表示方法联系在一起，然后通过多个词对表达文本的主题信息，使之更加全面准确的表达上下文信息，从而减小主题偏移影响。</p><p>实体词作为BTM双词模型的一个词，文本中其他名词或名词短语作为另一个词</p><h3 id="模型框架"><a href="#模型框架" class="headerlink" title="模型框架"></a><strong>模型框架</strong></h3><p>半监督实体消歧算法 ：实体双词主题模型(Entity-Biterm Topic Modeling,EBTM)，通过构建&lt;实体，名词(或实体)&gt;词对，为每个词对分配一个主题，最终得到词对中实体的主题。</p><p><img src="https://whh.plus/images/EBTM.png" alt="模型框架" loading="lazy"></p><p>首先为每个Wiki实体页面中分配一个单独的主题(将该主题看作一个实体标签)，即对Wiki页面中的每个共现词对标记该实体标签，进而通过对测试文本中待消歧实体进行实体标注的方式，确定候选实体</p><h3 id="半监督算法"><a href="#半监督算法" class="headerlink" title="半监督算法"></a><strong>半监督算法</strong></h3><p>模型分为训练阶段和标注阶段</p><p>训练阶段 ：收集Wiki页面集用$T$表示，对该页面中的词进行Gibbs采样，得到页面的词对集合，并为每个集合分配一个单独的主题$z_T$(实体标签)，即$z_T$表示Wiki页面$T$中所有共现词对的主题分布</p><p>标注阶段 ：测试文本集设为$D$，采用Gibbs采样算法对$T∪D$中的共现词对进行采样，并且对$T$词对的主题分布保持不变，只对$D$中的共现词对进行Gibbs采样。</p><hr><p>算法1 EBTM半监督消歧算法</p><p>Input : Wiki页面集T、测试文本集D、带词注释的Wikipedia页面$\gamma$</p><p>Output ：文本集$D$中每个$e_i$对应的实体标签</p><p>训练阶段 ：对每个Wiki页面中的词进行Gibbs sampling，得到词对集合，并为该集合分配一个单独的主题(实体标签)</p><p>标注阶段 ：</p><ol><li><p>对文本集D中每个出现词对：</p><p> 共现词对出现在$T$中：对词对保持$z_T$主题分布;</p><p> 共现词对未出现在$T$中：统计$\gamma$中两个先验观察项；</p><p> 进行增量Gibbs sampling，更新$z_D$；</p></li><li><p>对每个包含实体$e_i$的词对：</p><p> 计算其分配到各个主题的个数$|w_i^e →k|$；</p><p> 得到实体$e_i$的主题：<br> $$z_{w_i}^e=k,where max|w_i^e→k|$$</p></li></ol><p>3.确定D中每个实体$e_i$对应的候选实体</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a><strong>实验</strong></h2><h3 id="数据和预处理"><a href="#数据和预处理" class="headerlink" title="数据和预处理"></a><strong>数据和预处理</strong></h3><p>Wikipedia页面是大多数学者使用的公共数据集，广泛应用于关系抽取、实体消歧等研究领域，本文采用2011年6月23日对应的Wikipedia中文数据资源：zhwiki-latest-pages-articles.xml。</p><p>随机选取了五个主题：“人工智能、数据挖掘”、“素质教育、高等教育”、“体育运动”、“智能手机、安卓、苹果手机”、“流行音乐”，并在对应的三千多篇文章中随机抽取800篇文章作为本文数据，其中包含词总共1w+，实体3k+，且每篇文章平均实体名次数为8，可认定实验数据为短文本。</p><h3 id="实验和分析"><a href="#实验和分析" class="headerlink" title="实验和分析"></a><strong>实验和分析</strong></h3><h4 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a><strong>评价指标</strong></h4><p>recall : 召回率</p><p>precision : 准确率</p><h4 id="实验对比"><a href="#实验对比" class="headerlink" title="实验对比"></a><strong>实验对比</strong></h4><p>1.主题个数对比分析</p><p><img src="https://whh.plus/images/e2.png" alt="仿真参数" loading="lazy"></p><p>该算法对主题数目的敏感度较低，使用性好</p><p>2.不同算法性能对比分析</p><p><img src="https://whh.plus/images/e3.png" alt="不同算法性能实验结果" loading="lazy"></p><p>3.算法模型的主题分布</p><p><img src="https://whh.plus/images/e4.png" alt="主题词对分布" loading="lazy"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h2><p>本文采用双词主题模型，将协同实体关系融合到主题模型中提出基于BTM的半监督实体消歧模型，通过将词对中第一个词选择为共现协同实体，有效的减小了LDA 主题模型中主题偏移现象，提高了命名实体消歧准确度． 在利用维基百科实体页面资源时，将实体页面注释信息看作偏置观察量，更新到Gibbs 采样过程中，使得EBTM 模型提高了准确度。</p><p>本文还具有一定的局限性，在面对文章大小长短不一的自由文本时，BTM 模型性能并不比LDA 模型更加优越，因此下一步计划设计更加复杂的主题模型，例如加入层次语义图关系、远程监督等，提高语义分析准确度，从而提高实体消歧准确度。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bert</title>
      <link href="2020/08/25/bert/"/>
      <url>2020/08/25/bert/</url>
      
        <content type="html"><![CDATA[<h3 id="CCKS-amp-百度-2019中文短文本的实体链指-第一名解决方案"><a href="#CCKS-amp-百度-2019中文短文本的实体链指-第一名解决方案" class="headerlink" title="CCKS&amp;百度 2019中文短文本的实体链指 第一名解决方案"></a><center><strong>CCKS&amp;百度 2019中文短文本的实体链指 第一名解决方案</strong></h3><p>code 文件夹下为项目文件<br>比赛网址： <a href="https://biendata.com/competition/ccks_2019_el/">https://biendata.com/competition/ccks_2019_el/</a><br>数据集：<a href="https://pan.baidu.com/s/1SShtugdAMVf0fdaBowtMiA">https://pan.baidu.com/s/1SShtugdAMVf0fdaBowtMiA</a> 提取码:8r80<br>这是提交的时候代码，自己测试是请先划分出验证集，上述所有代码都是交叉验证有多个模型，很费时间，自己跑的时候跑一折就行</p><p><strong>摘要</strong></p><p>　　传统的实体链接任务主要是针对长文档。长文档拥有充分的上下文 信息，能够辅助实体的识别与消歧。相比之下，中文短文本的实体链接存 在很大的挑战。实体链接整个过程包括实体识别和实体消歧两个子任务。 针对实体识别子任务，我们创新性地利用了知识库描述文本的信息来增强 实体识别的性能，提出了 BERT-EntityNameEmbedding（BERT-ENE） 模型。具体地说，首先通过挖掘知识库中实体的描述文本得到实体名字的 向量嵌入，然后通过名称字典匹配技术，得到得到短文本中的候选实体，最 后利用 BERT-ENE 模型对结果进行筛选，完成实体识别的任务。此外，本 文进一步提出了一种将 BERT-ENE 模型与 BERT-CRF 模型相融合的新 方法，相比传统方法识别效果有了显著提升。针对实体消歧子任务，将其 视为二分类问题，通过基于 BERT 的二分类模型对候选实体进行预测，然 后对预测的概率进行排序，进而完成消歧任务。基于本文提出的方法，我们在 CCKS2019 面向中文短文本的实体链指任务中，取得了第一名的成绩。</p><p><strong>关键词</strong></p><p>　　实体链接，实体识别，实体消歧，BERT</p><span id="more"></span><p><strong>1</strong> <strong>数据分析与处理</strong></p><p>　　训练数据包含 text 字段和 mention_data 字段，mention_data 里面包 含连接的 mention 以及 kb_id。知识库包含 subject_id，subject，alias，data 等字段，data 中包含多个 predicate、object。</p><p><strong>1.1 引入新的别名</strong></p><p>　　经过对数据集统计分析，训练集中有 2.592% 的实体名在实 体库中无法匹配，部分错误样例如下所示： </p><ol><li>安妮 ‘海瑟薇：文本中间有特殊符</li><li>新浪微薄：输入文本中实体名错误</li><li>国家质检总局: 别名不在知识库中</li></ol><p>　　为了解决这个问题通过为知识库中的对应实体引入新的别名来改善这 一问题，具体步骤如下</p><ol><li><p>对于错误１，对特殊符号进行归一化处理，并将处理后的名字，加入到对应实体的别名中。如所有中文标点符号全部准换成英文标点符号。</p></li><li><p>对于错误３，我们实体识别的模型能够解决这一问题</p></li><li><p>针对错误2与错误3，统计知识库中实体（$E$）无法匹配总次数（$E_{num}$）,训练集中实体E 无法匹配的所有字符串（$M_1,M_2,M_3…M_i$）以及该字符串对应的出现次数（$M_{inum}$）。我们设定，如果$E_{num}$ 大于4，并且$M_{inum}$ 大于3，则将字符串M加入到实体E的别名中。如，针对知识库中实体 bilibili 统计信息如下：</p></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token string">'bilibili'</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">'E_num'</span><span class="token punctuation">:</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token string">'哔哩哔哩'</span><span class="token punctuation">:</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token string">'哔哩哔哩弹幕视频网'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'异地恋'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b站'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span></code></pre><p>   根据以上统计将 ‘哔哩哔哩’ ，’哔哩哔哩弹幕视频网’，’b站’ 加入到实体 bilibili 的别名中。</p><p><strong>1.2  实体描述文本的构建</strong></p><p>　　知识库中每个实体都有‘data’ 字段，‘data’ 字段包含多个predicate项和object项，数据格式如下：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"subject_id"</span><span class="token operator">:</span> <span class="token string">"10001"</span><span class="token property">"subject"</span><span class="token operator">:</span> <span class="token string">"胜利"</span><span class="token punctuation">,</span><span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"predicate"</span><span class="token operator">:</span> <span class="token string">"摘要"</span><span class="token punctuation">,</span> <span class="token property">"object"</span><span class="token operator">:</span> "英雄联盟胜利系列皮肤是拳头公司制作的具有纪念意义限定系列皮肤之一。拳头公司制作的具有纪念意义限定系列皮肤还包括英雄联盟冠军系列皮肤。..."<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token property">"predicate"</span><span class="token operator">:</span> <span class="token string">"制作方"</span><span class="token punctuation">,</span> <span class="token property">"object"</span><span class="token operator">:</span> <span class="token string">"Riot Games"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token property">"predicate"</span><span class="token operator">:</span> <span class="token string">"外文名"</span><span class="token punctuation">,</span> <span class="token property">"object"</span><span class="token operator">:</span> <span class="token string">"Victorious"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"predicate"</span><span class="token operator">:</span> <span class="token string">"义项描述"</span><span class="token punctuation">,</span> <span class="token property">"object"</span><span class="token operator">:</span> <span class="token string">"游戏《英雄联盟》胜利系列限定皮肤"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p>　　将所有的 predicate和object 相连得到实体描述文本。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"10001"</span><span class="token operator">:</span> "摘要：英雄联盟胜利系列皮肤是拳头公司制作的具有纪念意义限定系列皮肤之一。...<span class="token punctuation">,</span>制作方<span class="token operator">:</span>Riot Games<span class="token punctuation">,</span>外文名<span class="token operator">:</span>Victorious<span class="token punctuation">,</span>来源<span class="token operator">:</span>英雄联盟<span class="token punctuation">,</span>中文名<span class="token operator">:</span>胜利" <span class="token punctuation">&#125;</span></code></pre><p>　　连接后的描述文本长度分布如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picture/Number_of_Text_Length.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>66%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>66%<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></code></pre><p>　　通过分析可以发现文本会存在过长的情况，为了方便以后处理需要多过长的文本进行截断，截断规则如下：</p><ol><li>predicate项+object项 的长度小于30 不截断</li><li>predicate项+object项 的长度大于30按比例截断</li></ol><p><strong>1.3 其他处理</strong></p><p>为了方便后续模型的使用我们需要根据知识库数据，构建一些字典。有以下几个字典：</p><ol><li>entity_id 字典   key：实体名字 value：kb_id 列表</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'胜利'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'10001'</span><span class="token punctuation">,</span> <span class="token string">'19044'</span><span class="token punctuation">,</span> <span class="token string">'37234'</span><span class="token punctuation">,</span> <span class="token string">'38870'</span><span class="token punctuation">,</span> <span class="token string">'40008'</span><span class="token punctuation">,</span> <span class="token string">'85426'</span><span class="token punctuation">,</span> <span class="token string">'86532'</span><span class="token punctuation">,</span> <span class="token string">'140750'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>   其中 胜利 为实体名字，列表里面为名字为 胜利 的所有实体的id。</p><ol start="2"><li>id_entity字典  key: kb_id  value: subject字段(实体名字)</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'10001'</span><span class="token punctuation">:</span> <span class="token string">'胜利'</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>id_text字典 key：kb_id   value: 实体描述文本</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'10001'</span><span class="token punctuation">:</span> <span class="token string">'摘要:英雄联盟胜利系列皮肤是拳头公司制作的具有纪念意义限定系列皮肤之一。'</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>id_type字典  key：kb_id    value: entity type</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'10001'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Thing'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>type_index字典 key：type name value：index</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>   ‘NAN’<span class="token punctuation">:</span> <span class="token number">0</span>   <span class="token string">'Thing'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span></code></pre><p><strong>2 实体识别</strong></p><p>但是使用 BERT-CRF模型只利用到了短文本信息，并没有利用知识库的信息。仍然会遇到实体边界识别错误，句子中实体识别不全等问题。为了解决上述不足，并且能够完全利用知识库的信息，提出了 BERT-ENE 模型。</p><p>针对实体识别任务，首先采用现在效果较好的 BERT-CRF 命名实体识别模型。针对基于实体库实体链接（尤其是短文本）仅仅采用BERT+CRF进行实体识别有两点不足：</p><ol><li>BERT+CRF仍然会造成实体边界错误</li><li>BERT+CRF模型识别实体不全</li><li>没有利用到知识库的信息</li></ol><p>为了解决上述两个不足，并且能够完全利用知识库里面的实体信息，构建了BERT-EntityNameEmbedding模型，与BERT-CRF融合，解决上述问题。</p><p><strong>2.1 BERT+CRF</strong></p><p>图 1 为 BERT-CRF 模型，采用 BIO 标记，其中 BERT 的[CLS],[SEP] 位置用标签 TAG 表示。模型主要包含输入层、 BERT 层和 CRF层。：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picture/bert _CRF.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>66%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>66%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></code></pre><p>涉及到的一些参数:</p><p>– max_len 52</p><p>–batch_size 64</p><p>–dropout 0.2 （bert 输出后接的dropout）</p><p>–num_epochs 7</p><p>一些训练细节：</p><ol><li>将训练集分为9份，采用9折交叉验证，分别按照loss和f1保存模型，共18个模型</li><li>因为BERT具有一定的随机性，在训练的过程中针对每个模型会多训练几次选择较好的一个（从第一轮结束验证后就能判断，不用全部跑完）</li><li>前3轮学习率为1e-5，后面会调整为1e-6</li><li>最大epoch为7，训练过程会根据loss提前停止</li></ol><p><strong>2.2 BERT-EntityNameEmbedding（BERT-ENE）模型</strong></p><p>　　BERT-ENE 模型如图 2 所示，其具体思路为： 1. 利用知识库的实体名称和实体的别名信息构建实体名称字典。 2. 通过知识库的实体描述文本，利用 BERT 预训练模型，选取模型 CLS 位置的向量输出作为实体名称的<br>向量嵌入。 3. 通过字典匹配方式，得到短文本中候选实体。 4. 通过构建的BERT-ENE 模型对匹配的结果进行筛选。</p><p><strong>2.2.1 字典树+实体正向最大匹配</strong></p><p>　　为了加快速度采用字典树这一结构，同时采用正向最大匹配实体的思路，去匹配文本中实体。首先需要的数据为1.3中的 entity_id 字典，将里面的key 也就是实体名字插入到字典树中，实体库中存在很多单字实体，这类实体匹配会造成太多匹配结果，对于单字实体不在插入。</p><p>全部匹配例：</p><pre class="language-python" data-language="python"><code class="language-python">text：《大话英雄·联盟》<span class="token operator">-</span>原创<span class="token operator">-</span>高清视频result： <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'大话英雄·联盟'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'联盟'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'原创'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'高清视频'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'视频'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>最大匹配例：</p><pre class="language-python" data-language="python"><code class="language-python">text：《大话英雄·联盟》<span class="token operator">-</span>原创<span class="token operator">-</span>高清视频result： <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'大话英雄·联盟'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'原创'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'高清视频'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>正确结果：</p><pre class="language-python" data-language="python"><code class="language-python">text：《大话英雄·联盟》<span class="token operator">-</span>原创<span class="token operator">-</span>高清视频result： <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'大话英雄·联盟'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'视频'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>通过经过统计发现，采用最大匹配对整体数据效果较好，但是在实验过程中发现，最大匹配时会出现一些实体重复，如 迅雷、下载 和 迅雷下载三个实体，还有 视频 和 高清视频两个个实体，如果不处理最大匹配时将会漏掉 迅雷、下载 两个实体，仅仅会匹配 迅雷下载 这一个实体。为处理这种情况，统计他们出现的次数并根据出现次数来决定这类实体该怎么处理。处理分一下三种情况：</p><pre class="language-none"><code class="language-none">1. 仅保留最大的实体，如迅雷下载开，2. 保留小的实体，具体保留那个看统计数据 如  迅雷、下载 仅仅保留‘迅雷’3. 都保留 如 迅雷 下载 迅雷下载</code></pre><p>代码实现依然按照最大匹配去实现，只是针对要分开的实体，在匹配结束后再分开。</p><p><strong>2.2.2 实体名字嵌入</strong></p><p>　　为了能够对匹配到的实体进行二分类，需要将实体名字用一个向量表示，当然实体名字嵌入向量可以随机生成最后通过训练也能不断拟合，但是一个好的初始化向量对结果影响很大，也因为后续模型用到了BERT，这里使用BERT来得到实体名字的嵌入。具体思路和过程如下：</p><ol><li><p>将每个实体文本描述输入到BERT模型，则 [CLS] 位置的输出向量可以这个实体的意思。于是我们能够得到每个实体对应的向量，代码中我们用一个字典表示 id_embedding key：subject_id， value：CLS 输出向量</p></li><li><p>对于实体名字只对应一个实体的情况，则直接用实体对应向量当做这个实体名字的嵌入。如</p></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'无尽武道'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'10007'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>对于实体名字只对应多个实体的情况，求平均，如</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'胜利'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'10001'</span><span class="token punctuation">,</span> <span class="token string">'19044'</span><span class="token punctuation">,</span> <span class="token string">'37234'</span><span class="token punctuation">,</span> <span class="token string">'38870'</span><span class="token punctuation">,</span> <span class="token string">'40008'</span><span class="token punctuation">,</span> <span class="token string">'85426'</span><span class="token punctuation">,</span> <span class="token string">'86532'</span><span class="token punctuation">,</span> <span class="token string">'140750'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>通过这种方式能够为每个实体名字得到一个768维的向量嵌入，模型图如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picture/Entity_embedding.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>66%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>66%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></code></pre><p><strong>2.2.3 训练数据构建</strong></p><p>通过上述匹配方式，匹配结果：（高清视频 属于上述第三种情况，最后模型会判断取那个好）</p><pre class="language-python" data-language="python"><code class="language-python">text：《大话英雄·联盟》<span class="token operator">-</span>原创<span class="token operator">-</span>高清视频result： <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'大话英雄·联盟'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'原创'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'高清视频'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'视频'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>根据正确结果得到 label 为：</p><pre class="language-python" data-language="python"><code class="language-python">label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><p><strong>2.2.4 模型</strong></p><p>BERT-ENE 模型如图 2 所示，其基本思路为：</p><ol><li>利用知识库的实体名称和实体的别名信息构建实体名称字典。</li><li>通过知识库的实体描述文本，利用 BERT 预训练模型，选取模型 CLS 位置的向量输出作为实体名称的<br>向量嵌入。 </li><li>通过字典匹配方式，得到短文本中候选实体。 </li><li> 通过构建的BERT-ENE 模型对匹配的结果进行筛选。</li></ol><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picture/bert _entity_embedding.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></code></pre><p>模型具体过程为：</p><ol><li>短文本经过 BERT层 ，得到BERT的输出</li><li>将BERT的输出输入到正向GRU网络和反向GRU网络中。然后抽取匹配到的实体名称对应在正向GRU的结束位置的向量$V_{end}$以及对应在反向GRU的开始位置的向量$V_{begin}$，将这两个向量连在一起得到$V_{con}$，则可以代表这个实体名称在文本语义表示。  </li><li>为了学到整个文本的信息，分别对正向GRU 和反向GRU的输出，做最大池化操作，得到向量$V_{max}$，$V_{max}$可以表示整个文本的语义。 </li><li>最后将$V_{max}$与$V_{con}$以及对应的实体名称嵌入连在一起经过卷积层、全连接层，$sigmoid$激活最后得到预测概率。 </li></ol><p><strong>2.3 实体识别结果融合</strong></p><p>如上所述，实体识别分为两个模型，一个 BERT-CRF 模型，一个 BERTENE。 BERT-CRF 模型识别的实体会因为边界错误导致不能够匹配得到候选实体。而 BERT-ENE 模型是通过词典匹配方式实现，所以 BERT-ENE的结果都能够在知识库找到候选实体，不会出现边界错误。 BERT-ENE 模型在词典匹配时，去掉了单字实体，而 BERT-CRF 模型可以预测单字实体。所以将两种方案融合，能够取得最好的效果。融合规则为：如果两个结果在位置存在重复，则选取 BERT-ENE 的结果，单字实体选取 BERT-CRF 模型的结果。</p><p>具体为：BERT+CRF共18个模型，对预测结果进行投票，分别去BERT+CRF模型投票大于8的作为BERT-CRF 模型的结果。选取BERT-ENE模型概率大于0.45作为结果，合在一起即可。</p><p><strong>３实体消歧</strong></p><p>　　实体消歧是基于二分类的思想实现，训练时选取连接到的实体作为正例，在候选实体里选取两个负例。将短文本以及待消歧实体的描述文本连在一起，输入到BERT模型，取CLS 位置向量输出，以及候选实体对应开始和结束位置对应的特征向量，三个向量连接，经过全连接层，最后sigmoid激活得到候选实体的概率得分。对所有候选实体的概率得分进行排序，选择概率最高的为正确实体。模型图如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picture/bert_binary.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>75%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>75%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></code></pre><p>其他细节：</p><ol><li>两个句子长度最大选取为256，负样本选取了3个，并且选取了一些通过上述匹配方式得到的一些负样本</li><li>训练集分为5份，5折交叉验证，并对测试集结果求平均</li><li>后来发现时间充足又训练了，长度384，负样本选取了2个,7折交叉验证的模型，并与上面的求平均</li></ol>]]></content>
      
      
      <categories>
          
          <category> bert </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于随机游走的实体链接方法</title>
      <link href="2020/06/25/%E5%9F%BA%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%B8%B8%E8%B5%B0%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%96%B9%E6%B3%95/"/>
      <url>2020/06/25/%E5%9F%BA%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%B8%B8%E8%B5%B0%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><p>实体链接是实现军事情报语义理解的关键技术，有助于机器从实体维度自动建立信息之间的关联，为指挥员提供更高效精准的信息服务，提出了一种基于随机游走的实体链接方法。首先，利用实体的描述信息计算得到实体间相似度；然后，基于各实体间的语义关联，生成待链接实体间的关联图，将实体链接问题建模成关联图上的随机游走过程；最后，通过试验表明，该方法与单纯使用相似度函数计算方法相比能有效提升链接效果，修复实体相似度计算的误差，生成更正确的实体链接</p><p><strong>关键词</strong> ：实体链接； 随机游走；语义关联；相似度计算</p><span id="more"></span><h2 id="随机游走模型"><a href="#随机游走模型" class="headerlink" title="随机游走模型"></a><strong>随机游走模型</strong></h2><p>随机游走 ：给定一个图，游走者从某个顶点或一系列顶点开始遍历该图，在任意一个顶点，游走者对于下一步行动有2种选择：以概率1-c随机选择一条关联到当前顶点的边以游走到某个邻居顶点，或以c的概率随机跳转到图中任意一个顶点</p><p>整个游走过程可使用下式描述：$r=(1-c)Mr+cq$</p><p>$c$ : 游走者在沿边移动和随机跳转之间选择后者的概率</p><p>$r$ : 游走后每个顶点被访问到的概率分布向量</p><p>$M$ : 图的邻接矩阵归一化后的转移概率矩阵</p><p>$q$ : 游走过程中随机跳转到图中各个顶点的概率分布向量</p><h2 id="基于随机游走的实体链接模型"><a href="#基于随机游走的实体链接模型" class="headerlink" title="基于随机游走的实体链接模型"></a><strong>基于随机游走的实体链接模型</strong></h2><p><img src="https://whh.plus/images/model1.png" alt="基于随机游走的实体链接模型" loading="lazy"></p><ul><li>数据预处理 ：利用实体抽取和图像目标识别等多种实体信息抽取技术从多源异构数据中抽取得到的实体信息，可能存在格式上不一致或包含了噪声数据，需在预处理阶段对数据进行归一化</li><li>实体相似度计算 ：根据实体属性值的数据类型使用不同相似度计算方法来度量它们之间的相似性，再使用聚合函数初始化实体间的相似度矩阵</li><li>图模型构建 ：根据实体类型，基于相似度确定候选链接单元，将所有候选单元作为关联图中的顶点，再基于各实体间的语义关系，确定候选链接单元，将所有候选单元作为关联图中的顶点，再基于各实体间的语义关系，确定候选链接单元间的关联(即生成关联图中的边)</li><li>随机游走 ：使用随机游走完成实体链接的目标是通过随机游走确定候选链接单元正确与否的概率。在构建的关联图上执行随机游走算法，稳定后的概率分布就是候选链接单元的后验概率分布</li><li>生成链接结果 ：根据稳定概率分布按照实体类型构建二部图，再使用稳定婚姻算法(?)生成链接结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于领域图谱的实体链接技术研究</title>
      <link href="2020/06/18/%E5%9F%BA%E4%BA%8E%E9%A2%86%E5%9F%9F%E5%9B%BE%E8%B0%B1%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
      <url>2020/06/18/%E5%9F%BA%E4%BA%8E%E9%A2%86%E5%9F%9F%E5%9B%BE%E8%B0%B1%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>基于领域图谱的实体链接技术研究</strong></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><p>将文本中识别出来的实体链接到具体的实体信息上，从而实现从字符串到信息的跳转，对许多应用来说至关重要。使用机器学习或深度学习实现链接需要大量的领域数据语料以及标注数据，对于敏感领域比较难实现。文章提出基于领域图谱的实体链接技术，首先融合了字面相似度、文本相似度、同义词集、字符包含等多方面相似性度量特征，其次将文本中的上下文实体在图谱中的关联性纳入链接的候选特征，实现领域实体的高效链接，并有效的解决了特殊领域训练语料难的问题。</p><p><strong>关键词</strong> : 实体链接；领域图谱；上下文实体；高效链接</p><span id="more"></span><p>当前的实体链接模型往往只考虑到部分字符上的相似度特征，对于文本中上下文语义信息并没有进行充分考虑</p><p>主要贡献：</p><p>(1)文章融合了同义词集、字符相似性、包含相似性三方面的相似性度量标准</p><p>(2)文章将文本中上下文实体在图谱中的关联性纳入链接的候选特征，充分利用图谱中的实体关联度，能够更精确的实现实体到知识库的链接</p><p>(3)文章通过领域图谱中大量的领域实体作为数据来源，充分验证了该方法在领域内的高效性</p><h2 id="候选实体集生成"><a href="#候选实体集生成" class="headerlink" title="候选实体集生成"></a><strong>候选实体集生成</strong></h2><p>候选实体将通过计算从图谱的实例集合中匹配top N个实体作为候选实体集</p><h2 id="实体相似度计算"><a href="#实体相似度计算" class="headerlink" title="实体相似度计算"></a><strong>实体相似度计算</strong></h2><ul><li>字面相似度计算 ：字面相似度就是指字符串之间的相似程度，主要体现在两个字符串字符之间的最长公共子序列，字符串的相似度计算如下：<br>$$S_{lcs}(e_a,e_b)=\cfrac {|LCS(e_a,e_b)|} {|e_a|+|e_b|-|LCS(e_a,e_b)|}$$</li></ul><p>$|LCS(e_a,e_b)|$ : 表示实体$e_a$和$e_b$之间的最长公共子序列的长度</p><ul><li>文本相似度计算 ： 文本相似度通常采用余弦相似度、KL散度、概率模型相似度等，本文采用余弦相似度计算文本相似度，计算如下：<br>$$S_{cos}=\cfrac{e_a \bullet e_b}{||e_a| \times |e_b||}$$</li></ul><p>$e_a \bullet e_b$ : 表示两个实体在空间中的向量乘积</p><ul><li><p>同义词处理 ： 对表征同一个实体的方法进行处理。本文采用配置知识图谱的同义词词典来完成实验，其主要方法包括从外网获取和手动添加</p></li><li><p>包含字符处理 ：包含关系指两个实体的字符之间存在包含与被包含的关系，由于包含关系是一串连续的字符相似，某个实体的字符串是另一个实体的子集</p></li></ul><h2 id="上下文实体分析"><a href="#上下文实体分析" class="headerlink" title="上下文实体分析"></a><strong>上下文实体分析</strong></h2><p>传统的文本上下文信息通常只考虑到文本的语义相似度信息，没有结合知识图谱的关联关系去考虑上下文实体在图谱中的关联路径对待链接候选实体的影响</p><p>(1)选取待链接实体的上下文实体集，在图谱中链接得到实体集合为：<br>$$ge=\{ge_1,ge_2,…,ge_i\}$$</p><p>(2)通过相似度计算候选实体集合，其在图谱中的链接实体集为：<br>$$he=\{he_1,he_2,…,he_j\}$$</p><p>(3)遍历上下文实体集中的所有实体，计算其到所有候选实体的最短路径的加权值：<br>$$S_{shortest}(ge,he_j)=\lambda\sum_{i=1}^{j=1}Shortestpath(ge_i,he_j)$$</p><p>实验数据集 ：领域图谱数据 和实体链接的预标注数据</p><p>图谱数据 ：主要是用于进行候选实体链接以及计算上下文实体和链接候选实体最短加权路径</p><p>预标注数据 ：主要用于测试集验证链接效果</p><p>实验使用的领域语料：主要来源于环球网、凤凰新闻网、新浪新闻</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于上下文信息和排序学习的实体链接方法</title>
      <link href="2020/06/18/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BF%A1%E6%81%AF%E5%92%8C%E6%8E%92%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%96%B9%E6%B3%95/"/>
      <url>2020/06/18/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BF%A1%E6%81%AF%E5%92%8C%E6%8E%92%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>基于上下文信息和排序学习的实体链接方法</strong></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><p>为解决英语命名实体链接问题，提出一种基于上下文信息和排序学习的实体链接方法。首先使用上下文信息对实体指称进行扩充，并在维基百科中检索候选实体列表，然后通过抽取实体指称与候选实体之间的各类特征，利用ListNet排序算法对候选实体列表进行排序，选出Top1的候选实体作为链接结果，最后对未找到候选的实体指称即NIL实体，通过实体聚类算法进行关联链接。</p><p><strong>关键词</strong> : 英语实体链接；上下文信息；排序学习；ListNet排序算法；实体聚类</p><span id="more"></span><p>目前较为普遍的实体链接方法是，首先形成候选实体列表，然后对该列表进行排序，最后再进行链接。</p><p>基于上下文信息和排序学习的实体链接方法。</p><p>优点：</p><p>1.采用合理的策略生成候选实体列表</p><p>2.对候选实体列表进行高精度的排序</p><p>3.NIL实体聚类中，将规则与传统的聚类算法相结合</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a><strong>相关工作</strong></h2><p>实体链接从最初的基于规则的方法，到基于统计的方法，如今，基于多方法融合的框架成为普遍被研究者接受的系统框架。该框架首先为实体指称生成候选实体列表，再对候选实体列表进行排序。</p><h2 id="基于上下文信息和排序学习的实体链接方法"><a href="#基于上下文信息和排序学习的实体链接方法" class="headerlink" title="基于上下文信息和排序学习的实体链接方法"></a><strong>基于上下文信息和排序学习的实体链接方法</strong></h2><p><img src="https://whh.plus/images/lct3.png" alt="基于上下文信息和排序学习的实体链接方法" loading="lazy"></p><p>预处理 ：主要从TAC KBP官方发布的源数据集中提取实体指称信息和实体指称的上下文</p><p>实体指称扩充 ：利用指称上下文中的同指关系以及从Wikipedia中抽取的词表和从爬虫获取的网络知识对实体指称进行扩充</p><p>候选实体检索 ： 对每个实体指称，从Wikipedia知识库中检索出对应的候选实体列表</p><p>候选排序 ：特征抽取和排序学习算法</p><p>这篇论文实现方法以及过程都较为普通，论文就不放上来了</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Q learning</title>
      <link href="2020/06/11/Q-learning/"/>
      <url>2020/06/11/Q-learning/</url>
      
        <content type="html"><![CDATA[<p><strong>行为准则</strong></p><p>假设现在我们处于写作业的状态而且我们以前并没有尝试过写作业时看电视, 所以现在我们有两种选择 , 1, 继续写作业, 2, 跑去看电视. 因为以前没有被罚过, 所以我选看电视, 然后现在的状态变成了看电视, 我又选了 继续看电视, 接着我还是看电视, 最后爸妈回家, 发现我没写完作业就去看电视了, 狠狠地惩罚了我一次, 我也深刻地记下了这一次经历, 并在我的脑海中将 “没写完作业就看电视” 这种行为更改为负面行为, Q learning 根据很多这样的经历是如何来决策的吧.</p><span id="more"></span><p><strong>Q-Learning 决策</strong></p><p>假设我们的行为准则已经学习好了，现在处于状态s1,我在写作业，有两个行为a1,a2,分别是看电视和写作业，根据经验，在这种s1状态下，a2写作业带来的潜在奖励要比a1看电视高，这里的潜在奖励我们可以用一个有关于s和a的Q表格代替，在我的记忆Q表格中，Q(s1,a1)=-2要小于Q(s1,a2)=1,所以我们判断要选择a2作为下一个行为。现在我们的状态更新成s2,我们还是有两个同样的选择，重复上面的过程，在行为准则Q表中寻找Q(s2,a1) Q(s2,a2)的值，并比较他们的大小，选取较大的一个.接着根据a2我们到达s3并重复上面的决策过程.Q learning 的方法就是这样决策的</p><p><strong>Q-Learning 更新</strong></p><p>回到之前的流程，根据Q表的估计，因为在s1中，a2的值比较大，通过之前的决策方法</p>]]></content>
      
      
      <categories>
          
          <category> 强化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于上下文词向量和主题模型的实体消歧方法</title>
      <link href="2020/06/11/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AF%8D%E5%90%91%E9%87%8F%E5%92%8C%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AE%9E%E4%BD%93%E6%B6%88%E6%AD%A7%E6%96%B9%E6%B3%95/"/>
      <url>2020/06/11/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AF%8D%E5%90%91%E9%87%8F%E5%92%8C%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AE%9E%E4%BD%93%E6%B6%88%E6%AD%A7%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>基于上下文词向量和主题模型的实体消歧方法</strong></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><p>传统词向量训练模型仅考虑词共现而未考虑词序，语义表达能力弱。此外，现有实体消歧方法没有考虑实体的局部特征。综合实体的全局特征和局部特征，该文提出一种基于上下文词向量和主题模型的实体消歧方法。首先在传统词向量模型上增加上下文方向向量，用于表征语序，并利用该模型与主题模型训练主题词向量；其次，分别计算实体上下文相似度、基于实体上下文主题的类别主题相似度以及基于主题词向量的实体主题相似度；最后，融合三种相似度，选择相似度最高的实体作为最终消歧实体。</p><p><strong>关键词</strong>：上下文词向量；实体消歧；知识库；主题词向量；主题模型</p><span id="more"></span><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a><strong>相关工作</strong></h2><ul><li>基于机器学习的方法</li></ul><p>核心：计算实体之间的相似度，在此基础上选择特定实体提及的目标实体</p><p>1.利用实体统计信息、名字统计信息进行目标实体消歧</p><p>2.利用百科数据作为背景知识，通过百科知识辅助消歧</p><p>3.考虑到一段文本中实体之间的相互关联，提出全局推理算法寻找全局最优决策</p><p>4.对实体流行语义关联度等特征进行特征组合，利用最大间隔算法计算各个特征的权重，进而通度、过排序算法完成对实体的消岐</p><p>5.半监督算法、远距离监督算法、基于海量数据冗余性的自学习方法可以从一定程度上解决语料标注问题</p><ul><li>基于深度学习的方法</li></ul><p>核心：构建多类型、多模态上下文及知识的统一表示，并对多源信息、多源文本之间的联系进行建模。</p><p>1.在原有的神经网络语言模型的基础上，加入卷积神经网络模型，较大程度上改进了实体消歧的效果</p><p>2.提出多源异构证据的向量表示学习方法，对不同来源知识库中的知识进行统一空间的表示，进而完成实体消歧。</p><p>3.提出对证据信息进行向量表示，基于表示向量学习不同证据之间的相似度，继而进行相似度融合，最终完成实体消歧</p><p>4.利用Skip-Gram模型进行词向量训练，并利用词向量进行相似度计算，实现实体链接与消歧</p><p>5.提出将待消歧实体和待消歧实体上下文语境映射到同一个空间，基于概率空间模型，根据实体的空间向量进行消歧</p><p>6.利用Skip-Gram模型进行词向量训练，并基于微博的短文本特征提出语义分类的方法，完成实体消歧</p><p>基于机器学习的方法需要借助丰富的标注语料完成实体消歧，基于深度学习的方法需要借助性能良好的消歧模型完成实体消歧</p><p>目前实体消歧存在两个问题：</p><p>1.由于传统的有监督机器学习算法需要大量的标注语料，而现有的标注语料难以满足实体消歧的需求。</p><p>词向量训练模型使用无标注的文本作为输入数据，将词组表征成低维的向量表示，可以有效解决缺少标注语料的问题。然而，传统词向量模型由于缺少对上下文语序等必要因素的考虑，导致词向量的语义表征能力不强，需要进一步改进。</p><p>2.在实体消歧的过程中，目前主流方法选用上下文语义特征、实体流行度特征、实体关联度特征等进行命名实体消歧。上述特征均是从实体背景文档的全局特征出发，计算待消歧实体和候选实体之间的相似度，没有考虑实体的局部特征。</p><p>潜在狄利 克雷分布（ｌａｔｅｎｔ ｄｉｒｉｃｈｌｅｔ ａｌｌｏｃａｔｉｏｎ，ＬＤＡ）主题模 型可以获取实体背景文档的主题信息，将其结合词 向量技术生成主题词向量，可以对背景文档的局部 主题特征进行表征，较好地解决传统模型仅考虑实 体全局特征的缺陷。</p><p>三部分：上下文词向量模型训练、候选实体生成、实体消歧</p><p>1.为解决传统词向量模型仅考虑词共现特征导致的语义表达能力不强的问题，在原有的Skip-Gram模型的基础上增加表征上下文语序的方向向量，利用无标注语料训练词向量模型，将每个词表示为n维的向量；</p><p>2.获得实体指称项的背景文档，获得候选实体在知识库中存储的背景知识，并使用上述词向量模型，将二者均表征为向量形式，针对实体的全局特征，分别计算上下文相似度和类别主题相似度</p><p>3.基于词向量模型以及LDA主题模型，结合文档的主题特征，训练主题词向量，针对实体的局部特征，进行实体主题相似度计算</p><p>4.按照一定比例融合三种相似度特征，得到待消歧实体与候选实体的最终相似度，选取相似度最高的候选实体作为待消歧的最终实体</p><p><img src="https://whh.plus/images/lct1.png" alt="实体消歧流程图" loading="lazy"></p><p>针对实体的全局特征，本文采用实体上下文相似度和实体主题类别相似度描述；针对实体的局部特征，本文采用基于主题词向量的主题相似度描述</p><h2 id="基于上下文的词向量模型训练"><a href="#基于上下文的词向量模型训练" class="headerlink" title="基于上下文的词向量模型训练"></a><strong>基于上下文的词向量模型训练</strong></h2><p>在Skip-Gram模型的基础上加入方向向量来表达语序，上下文词向量模型携带更多的语义信息。</p><ul><li>定义预测上下文词的概率函数，用于计算当前输入词$t$与上下文词$t+i$之间的共现概率，其定义如下：<br><img src="https://whh.plus/images/pt.png" alt="定义" loading="lazy"></li></ul><p>$V$ : 语料中词语的个数</p><p>$w_t$ : 词语$t$的词嵌入</p><p>$w’_t$ : 表示词语$t+i$的词嵌入</p><p>$w,w’$ : 分别表示输入词嵌入与输出词嵌入</p><ul><li>定义softmax函数$g(t+i,t)$度量上下文词$t+i$与输入单词$t$之间的词序关联，softmax函数$g(t+i,t)$的定义如下：<br><img src="https://whh.plus/images/gt.jpg" alt="softmax定义" loading="lazy"></li></ul><p>$\delta$ : 表示任意上下文词$t+i$相对于$t$的方向向量</p><p>借助负采样的原理，每次让一个训练样本仅更新一部分权重，所以函数$g(t+i,t)$的更新如下：<br><img src="https://whh.plus/images/w.png" alt="更新方程" loading="lazy"></p><p>$\sigma$ : 表示sigmoid函数</p><p>$\mu$ : 表示学习率</p><p>$H$ : 表示当前词与上下文词的方向标签 </p><ul><li>定义基于上下文词向量模型的目标函数$L_{DSG}$<br><img src="https://whh.plus/images/L.jpg" alt="目标函数" loading="lazy"></li></ul><p>$c$ : 表示词向量的窗口大小$f(w_{t+i},w_t) = p(w_{t+i}|w_t)+g(w_{t+i},w_t)$</p><ul><li>根据目标函数，使用费随机梯度下降和反向传播算法来优化模型。</li></ul><h2 id="候选实体生成"><a href="#候选实体生成" class="headerlink" title="候选实体生成"></a><strong>候选实体生成</strong></h2><p>候选实体借助 <a href="http://openkg.cn/dataset/zhishi-me">zhishi.me</a>百科数据获取。</p><p>维基百科可以提供构建候选实体有用的特征信息，但是维基百科中部分中文实体存在更新不及时的问题。<a href="http://openkg.cn/dataset/zhishi-me">zhishi.me</a>综合了维基百科、百度百科以及互动百科。</p><p>候选实体生成步骤：</p><ol><li><p>获取待消歧实体的背景文本，分词、去停用词后</p></li><li><p>根据训练的词向量模型，将处理的结果进行词向量表征，得到待消歧实体的上下文语境。</p></li></ol><p>3.根据<a href="http://openkg.cn/dataset/zhishi-me">zhishi.me</a>的离线数据，获得候选实体在知识库存储的摘要及全文信息，进行数据预处理，并使用上下文语境</p><p>4.通过对处理好的向量进行余弦相似度计算，确定实体指称项和候选实体的实体上下文相似度</p><p>$E(entity)=\{word_1,word_2,…,word_k\}$ ：实体指称项上下文表示</p><p>$w(word_i)=\{w_1,w_2,…,w_n\}$ : 训练好的词向量模型将文本进行词向量表示</p><p>$n$ : 表示词向量的维度</p><p>$word_i$ ：表示第$i$个上下文词语</p><p>$E(entity’)=\{word’_1,word’_2,…,word’_m\}$ : 通过在知识库中获得实体的摘要和全文信息，同样使用词向量训练模型进行向量化操作的向量表示</p><p>$w(word’_j)=\{w_1,w_2,…,w_n\}$ : 训练好的词向量模型将文本进行词向量表示</p><p>余弦相似度计算候选实体与指称项的上下文相似度，余弦值越大，相似度越高，公式如下：</p><p><img src="https://whh.plus/images/sim.png" alt="相似度计算" loading="lazy"></p><h2 id="基于实体上下文主题的类别主题相似度"><a href="#基于实体上下文主题的类别主题相似度" class="headerlink" title="基于实体上下文主题的类别主题相似度"></a><strong>基于实体上下文主题的类别主题相似度</strong></h2><p>实体主题 ：表示实体语义的相关性，主题就是词语的条件概率分布</p><p>主题和类别在一定程度上所包含的语义信息是相似的，将实体主题信息与实体对应的类别信息进行语义相似度计算，类别主题的相似度就是计算通过主题模型获取的上下文主题以及知识库中实体对应类别之间的相似度。</p><p><img src="https://whh.plus/images/lct2.png" alt="类别主题相似度流程图" loading="lazy"></p><p>基于实体上下文主题的类别主题相似度计算步骤：</p><p>1.对待消歧实体的背景文档进行预处理。预处理后，获取所有预处理的名词类词语，使用LDA主题模型获取待消歧实体上下文的主题，通过实验选取适当的主题个数作为待消歧实体的主题特征</p><p>2.每个实体在知识库中都有对应的类别信息，获取知识库中候选实体的类别信息</p><p>3.使用余弦相似度计算公式计算每个主题词与类别词之间的距离，计算$x$个待消歧实体主题与候选实体$y$个类别的相似度$sim’_y(x)$,选取相似度最大的项作为基于实体上下文主题的类别主题相似度</p><p><img src="https://whh.plus/images/e1.png" alt="苹果例子" loading="lazy"></p><h2 id="基于主题词向量的实体主题相似度"><a href="#基于主题词向量的实体主题相似度" class="headerlink" title="基于主题词向量的实体主题相似度"></a><strong>基于主题词向量的实体主题相似度</strong></h2><p>在实体消歧过程中，由于实体的名称可能存在一词多义的情况，所以实体的含义不能仅通过整个文档的主题来表达。针对此问题，本文融合词义信息及主题信息，提出在同一个语义向量空间中，使用嵌入表示的方法学习主题表示的主题词向量</p><p>主题词向量模型：主题词是指以特定主题为背景的词，基本思想是允许每个词在不同的主题下有不同的嵌入向量</p><p>主题词向量采用“主题-词”序列的训练方式，将主题和词共同表示为低维的向量，每个词语携带的主题信息更能表达该词语的语境。</p><p>基于主题词向量的相似度计算：主题词向量训练以及相似度计算</p><p>(1)对待消歧实体和候选实体的背景文档进行数据预处理，包括中文分词和去停用词</p><p>(2)使用LDA主题模型对文档的上下文语境进行主题建模，获取每个词语对应的主题词</p><p>(3)基于训练的词向量模型，将主题融入基于上下文词向量模型中。然后基于上下文主题词向量，通过给定当前词$t$和当前词的主题$z_t$,预测上下文主题词</p><p>(4)主题词向量模型的训练，通过设置投影矩阵,将主题和词语嵌入同一个语义空间，并定义目标函数$L(D)$<br><img src="https://whh.plus/images/LD.png" alt="目标函数" loading="lazy"></p><p>(5)使用余弦相似度计算基于主题词向量的主题相似度。</p><p>$tw=\{tw_1,…,tw_k\}$ : 实体指称项的背景文档对应的主题词向量</p><p>$tw’=\{tw’_1,…,tw’_m\}$ : 实体候选项的背景文档对应的主题词向量</p><p><img src="https://whh.plus/images/sim1.png" alt="相似度公式" loading="lazy"></p><p>三种相似度特征之间的比较</p><p><img src="https://whh.plus/images/tzbj.png" alt="相似度公式" loading="lazy"></p><h2 id="相似度融合"><a href="#相似度融合" class="headerlink" title="相似度融合"></a><strong>相似度融合</strong></h2><p>$$sim(entity,entity’)=\alpha sim_1(entity,entity’)+\beta sim_2(entity,entity’)+\gamma sim_3(entity,entity’)$$</p><p>$sim_1(entity,entity’)$ : 实体上下文相似度</p><p>$sim_2(entity,entity’)$ : 类别主题相似度</p><p>$sim_3(entity,entity’)$ : 实体主题相似度</p><p>$\alpha+\beta+\gamma=1$</p><p><a href="https://whh.plus/paper/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AF%8D%E5%90%91%E9%87%8F%E5%92%8C%E4%B8%BB%E9%A2%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AE%9E%E4%BD%93%E6%B6%88%E6%AD%A7%E6%96%B9%E6%B3%95.pdf">基于上下文词向量和主题模型的实体消歧方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于词向量的实体链接方法</title>
      <link href="2020/06/05/%E5%9F%BA%E4%BA%8E%E8%AF%8D%E5%90%91%E9%87%8F%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%96%B9%E6%B3%95/"/>
      <url>2020/06/05/%E5%9F%BA%E4%BA%8E%E8%AF%8D%E5%90%91%E9%87%8F%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>基于词向量的实体链接方法 </p><p>Ｊｏｕｒｎａｌ　ｏｆ　Ｄａｔａ　Ａｃｑｕｉｓｉｔｉｏｎ　ａｎｄ　Ｐｒｏｃｅｓｓｉｎｇ　 Ｖｏｌ．３２ ， Ｎｏ．３ ，Ｍａｙ ２０１７ ， ｐｐ．６０４－６１１</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h2><p>实体链接任务主要包括命名实体识别、查询扩展、候选实体选择、特征抽取和排序，本文针对查询词的扩展，提出一种基于词向量的扩展方法，利用连续词袋(CBOW)模型训练语料中词语的词向量，然后将距离查询词近的词作为扩展词。词向量从语料中挖掘出词与词之间的语义相关性是对基于规则的查询扩展方法的补充，以此来召回候选实体。在特征抽取时，把文档之间的潜在狄利克雷分布(LDA)的主题相似性作为特征之一。在计算文档相似性时，不再以高频词作为向量的维度，而是以基于词向量的相关词作为向量维度，由此得到文档的语义相似特征。最后利用基于单文档方法的排序学习模型把查询词链接到相应的候选实体。实验结果 $F1$ 值达到0.71</p><span id="more"></span><p>实体链接的方法主要有分类法、概率主题方法、Graph方法和排序法</p><p>分类法：把每个候选实体看作一个类别，每个查询词就是一个待分类项，抽取特征后根据SVM进行分类，此方法是哈尔滨工业大学在2012年TAC的实体链接任务中采用的方法。该方法没有考虑文档中的语义信息，只是根据词的共现来进行分类，并且训练数据少，噪声大。</p><p>概率主题方法：挖掘隐藏在文本之间的主题关系，来衡量文本之间的相似性。此方法只是单纯根据上下语义来进行实体链接，没有充分利用维基百科的结构化信息，准确率不是很高。</p><p>Graph方法：基于文本中实体和维基百科的特点，构造语义网络，通过网络中节点的距离、出度和入度等作为特征来涉及相似度衡量指标，从而实现语义消歧。虽然这种方法有较好的链接效果，然而也存在一些问题，当数据规模比较大时，网络图的存储、训练和计算就会比较繁琐。</p><p>传统的排序法：向量空间模型 VSM 抽取实体的上下文作为词袋，然后根据词频-逆向文档频（TF-IDF）中向量空间把上、下文表示成文本向量，计算余弦相似性。</p><h2 id="基于条件随机场命名实体识别"><a href="#基于条件随机场命名实体识别" class="headerlink" title="基于条件随机场命名实体识别"></a><strong>基于条件随机场命名实体识别</strong></h2><p>系统流程图：<img src="https://whh.plus/images/sfc1.png" alt="流程图" loading="lazy"></p><p>方法：CRF</p><p>训练数据：评测任务给定的训练集，利用Standford CoreNLP NER得到数据的句法树。</p><p>标记：采用BEIO标记，B表示实体的开始,E表示实体的结束，O表示非实体，I表示实体内部。</p><p>选择的特征：词语、词性、词在句法树中的父节点以及和父节点的关系。</p><h2 id="查询扩展"><a href="#查询扩展" class="headerlink" title="查询扩展"></a><strong>查询扩展</strong></h2><p>在候选实体选择模块中，查询词往往是缩写，于是对缩写进行扩展至关重要，比如，在维基百科中有超过几十个条目的缩写都是“ABC”，但如果将“ABC”扩展为“American Broadcasting Company”，这样在KB知识库中就可以准确的召回候选实体，而过滤其他不相关实体。</p><h3 id="基于规则查询扩展"><a href="#基于规则查询扩展" class="headerlink" title="基于规则查询扩展"></a><strong>基于规则查询扩展</strong></h3><p>在基于规则进行扩展时，主要使用支撑文档进行扩展，支撑文档即官方给定的出现这个查询词的文档，本文扩展规则：</p><ul><li>对于人名，若文档中有全称，就把查询词扩展成全称，如“Brown”扩展成“John Brown”</li><li>对于大写缩写，借助CRF抽取的命名实体在文档中让缩写扩展成全称</li><li>对于地名的缩写，根据地名、别名缩写词典进行扩展，如“US”扩展成“United States”</li></ul><h3 id="基于词向量的查询扩展"><a href="#基于词向量的查询扩展" class="headerlink" title="基于词向量的查询扩展"></a><strong>基于词向量的查询扩展</strong></h3><p>由于支撑文档只是出现查询词的背景，或者在文档中查询词只出现一次，于是借用支撑文档进行基于规则的查询扩展可能变得无效。为了能召回比较精确的候选实体，于是本文借用wiki的外部数据进行查询扩展。若不能进行基于规则的扩展，则基于词向量的扩展方法让返回相似度达到０．５以上的实体作为扩展词，此扩展词就作为候选实体来进行链接，以″Ｄｅｔｒｏｉｔ″为例，基于词向量的扩展结果有实体″Ｄｅｔｒｏｉｔ　Ｒｅｄ　Ｗｉｎｇｓ″，″ＵＳＳ　Ｄｅｔｒｏｉｔ″等，然后在ＫＢ中索引这些扩展实体的页面作为候选实体。</p><p>基于词向量的查询扩展根据词的上、下文语义进行扩展，是一个基于统计的无监督训练方式，此方法认为相近的词在语义上距离更相近。</p><p>Word2vec是一个深度学习模型，以大量文本训练语料作为输入，可以将每个词特征转化为一个K维的实值向量，该向量上进行相似度计算将能挖掘出相似词。</p><p>word2vec包括CBOW和Skip gram model 两种模型。</p><p>CBOW模型与传统的前向神经网络语言模型类似，不同点在于：</p><p>(1) CBOW预测语句中间的词，而不是最后一个词</p><p>(2) CBOW去掉了模型计算中最耗时的非线性隐层并且对所有词而言隐层相同，从而有效提高了词向量的训练速度。</p><p><img src="https://whh.plus/images/cbow.png" alt="cbow" loading="lazy"></p><h2 id="候选实体的选择"><a href="#候选实体的选择" class="headerlink" title="候选实体的选择"></a><strong>候选实体的选择</strong></h2><p>为了能最大程度的召回正确实体，本文进行索引的查询词是由规则方法进行扩展的查询词和由词向量进行扩展形成的查询词，使用模糊匹配的方式返回候选实体。</p><h2 id="特征抽取"><a href="#特征抽取" class="headerlink" title="特征抽取"></a><strong>特征抽取</strong></h2><p>本文抽取了LDA的主题特征以及基于词向量的文本相似性特征。</p><p>(1)实体之间的信息</p><p>查询词和候选实体标题的相关性对实验结果有着重要的影响。查询词与标题的相似性是特征之一，本文使用编辑相似性来度量其相似性，则</p><p><img src="https://whh.plus/images/S.png" alt="编辑相似度" loading="lazy"></p><p>L’ 为最小编辑次数，L1，L2分别为字符串的长度</p><p>(2)Wiki中的实体E</p><p>信息窗Infobox中的信息包括本地名、法定名、昵称以及上下文中的实体，上下文为KB中的文本内容。</p><p><img src="https://whh.plus/images/Ei.png" alt="Ei" loading="lazy"></p><p>(3)实体的类别特征C</p><p>类别标签反应的是一个实体的类别。若两个实体表示同一实体，那么其类别一致。本文抽取支撑文档中词的所有能确定类别作为查询词的类别以及候选实体的类别。</p><p><img src="https://whh.plus/images/Ci.png" alt="Ci" loading="lazy"></p><p>(4)类型信息t</p><p>类型信息指一个实体的类型，对于命名实体识别出的实体类型包括PER,GPE,ORG。而KB中实体也有相应的实体类型，如UKN,PER,GPE。UKN为不能确定的类型，若实体的类型不是UKN并且实体的类型和查询词的类型不一致则t为0,否则t为1。</p><p><img src="https://whh.plus/images/t.png" alt="t" loading="lazy"></p><p>(5)基于主题模型的文档相似度</p><p>LDA模型是一种对文档集建模的概率主题模型。传统判断两个文档相似性的方法是通过统计两篇文档共同出现的单词，基于TF-IDF的相似性计算方法，这种方法没有考虑到文档的语义相关性，而LDA恰好能表示两篇文档的主题相似性。LDA模型认为一篇文章都是以一定概率选择了某个主题，并从这个主题中以一定概率选择某个词语，这样一个过程得到一篇文档。LAD的原理可以表示为：</p><p><img src="https://whh.plus/images/P.png" alt="P" loading="lazy"></p><p>给定一系列文档，计算各个文档中每个单词的词频就可以得到“文档-词语”矩阵。主题模型就是通过这个“文档-词语”矩阵进行训练，学习出“词-主题”矩阵和“主题-文档”矩阵。</p><p>LDA的工作原理可以表示为 LDA模型认为文档的主题分布和主题的词分布属于LDA分布，文档以多项分布的概率选择一个主题，主题以多项分布的概率选择一个词。然后用主题和词的联合分布来近似估计主题的后验分布，最后训练文档的主题分布,用KL散度来计算文档之间的主题相似性。</p><p>KL距离也即相对熵，表示两个概率分布的距离。相似度度量标准KL距离为</p><p><img src="https://whh.plus/images/KL.png" alt="KL" loading="lazy"></p><p>(6)基于词向量的文本相似性</p><p>词向量进行查询扩展时，对文档的词利用CBOW模型进行词向量训练，然后根据余弦距离得到一个词的近义词或者相关词。传统度量文档之间相似性是基于高频词，但支撑文档只是查询词出现的语料，不能真正的解释查询词的含义，高频词也不能很好的表达查询词的语义信息。</p><p>为了能用其他语义共现词来表示查询词的上、下文，本文使用基于词向量的近义词作为查询词的文本向量。</p><h2 id="基于单文档排序的LTR模型"><a href="#基于单文档排序的LTR模型" class="headerlink" title="基于单文档排序的LTR模型"></a><strong>基于单文档排序的LTR模型</strong></h2><p>抽取的特征能否提高实体链接的准确率是排序学习(Learning to rank,LTR)模型要解决的核心问题。</p><p>单文档方法处理对象单一文档，将文档转化为特征向量后，主要将排序问题转化为机器学习中常规的分类或回归问题。查询词与候选实体的排序函数为：</p><p><img src="https://whh.plus/images/score.png" alt="score" loading="lazy"></p><p>Si ： 查询词与实体的编辑相似性</p><p>Ei : 实体页面内实体在查询词的支撑文档中出现的次数</p><p>Ci : 实体内页面类别在查询词的支撑实体的类别中出现的次数</p><p>simi : 支撑文档与候选实体文档的相似性</p><p>t : 类型信息，取值0/1</p><p>Dkl : 文档之间主题相似度</p><p>若Score小于0.6，则设定空实体。再对空的实体进行聚类，使用杰卡德相似系数(JSC)进行度量，即根据各个空实体支撑文档中共现的词个数进行聚类，大于某一阈值，就聚为一类。</p><p>杰卡德系数：</p><p><img src="https://whh.plus/images/jkd.png" alt="jkd" loading="lazy"></p><h2 id="实验设计与结果"><a href="#实验设计与结果" class="headerlink" title="实验设计与结果"></a><strong>实验设计与结果</strong></h2><p>测试数据：2014年TAC测评中实体链接任务提供的138篇文档，共抽取了5234个命名实体。</p><p>评价标准： B’+F1</p><p><img src="https://whh.plus/images/er1.png" alt="er1" loading="lazy"></p><p>实验1 ： 基于SVM的分类模型，使用实体的上、下文信息作为特征，每一个候选实体为一类，然后使用RBF进行分类</p><p>实验1结果分析 ：只是简单地使用上、下文信息进行SVM分类，效果不如其他方法</p><p>实验2 ：使用首选实体的标题以及KB的别名信息来进行实体链接的向量空间模型</p><p>实验2结果分析 ： 结果虽然不是很理想，但从实验中可以看出，KB节点的标题信息和别名信息对实体链接有着重要作用</p><p>实验3 ：抽取了半结构化的知识库Wikipedia进行解析，抽取其中的类别、别名、类型和文档之间的LDA主题相似性进行实验</p><p>实验3结果分析 ：与实验2对比显示加入外部数据库特征以及主题相似性特征的实验在PER、GPE类型的实体方面效果好于实验2</p><p>实验4 ：本文的LTR模型，最主要的不同在于除了充分利用标题、类别、别名、上下文和LDA等，加入基于词向量的文本相似性特征</p><p>实验4结果 ：在GPE,ORG类型的实体方法有着显著的提高，并对All-Query的链接也比其他方法好</p><p><a href="https://whh.plus/paper/%E5%9F%BA%E4%BA%8E%E8%AF%8D%E5%90%91%E9%87%8F%E7%9A%84%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%E6%96%B9%E6%B3%95_%E9%BD%90%E7%88%B1%E8%8A%B9.pdf">基于词向量的实体链接方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于城市地名实体双向链接分析的路线推荐研究</title>
      <link href="2020/06/04/%E5%9F%BA%E4%BA%8E%E5%9F%8E%E5%B8%82%E5%9C%B0%E5%90%8D%E5%AE%9E%E4%BD%93%E5%8F%8C%E5%90%91%E9%93%BE%E6%8E%A5%E5%88%86%E6%9E%90%E7%9A%84%E8%B7%AF%E7%BA%BF%E6%8E%A8%E8%8D%90%E7%A0%94%E7%A9%B6/"/>
      <url>2020/06/04/%E5%9F%BA%E4%BA%8E%E5%9F%8E%E5%B8%82%E5%9C%B0%E5%90%8D%E5%AE%9E%E4%BD%93%E5%8F%8C%E5%90%91%E9%93%BE%E6%8E%A5%E5%88%86%E6%9E%90%E7%9A%84%E8%B7%AF%E7%BA%BF%E6%8E%A8%E8%8D%90%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>【目的】</strong>：已有线路推荐研究较少考虑地名实体之间的次序，为此设计了基于城市地名实体双向链接分析的路线推荐方法</p><p><strong>【方法】</strong>：以特定场景下不同地名实体形成的有向加权网络为基础数据源，循环计算不同轨迹链隶属于各个地名实体对应理想集的链入和链出值，进而在通过布尔逻辑和位置限定运算符表达用户查询需求的基础之上，融合模糊检索算法，实现用户查询与轨迹链的精准匹配。</p><p><strong>【结果】</strong>：这篇提出的算法推荐准确率为0.75，高于TF-IDF推荐算法和不考虑地名实体次序的推荐算法，但召回率无优势，随着加权网络规模的增大，推荐准确率与召回率呈现明显的反向关系。</p><p><strong>【局限】</strong>：未考虑对象属性数据对推荐结果的影响。</p><p><strong>【结论】</strong>：本文方法融合了基于统计分析与语义分析的推荐算法，可快速生成备选路线及推荐指数。</p><span id="more"></span><p><strong>【研究现状及思路】</strong>：目前国内路线推荐研究主要集中于计算机科学领域和信息资源管理领域，计算机领域侧重对推荐模型、推荐算法、推荐方法在特定场景(尤其是移动场景)下的应用效果等内容进行细化研究，而信息资源管理领域则多从地理信息分析、旅游信息资源规划、推荐系统原型设计等角度进行解析。</p><p><strong>【基于城市地名实体双向链接分析的路线推荐过程】</strong>：轨迹链构建、地名实体链入和链出集合计算、基于链接分析结果的推荐策略研究</p><p><strong>【轨迹链构建】</strong>：借鉴了事件链建模思想，从文本中提取地名实体及其出现位置，序贯相连就形成了轨迹链。轨迹链的最小组成单位为由相邻地名实体构建的有向三元组$(\mathtt{V}_m,\mathtt{V}_n,E)$。$\mathtt{V}_m$ 表示前链，$\mathtt{V}_n$表示后链。$E$取值0或1，0表示前后链之间存在连接关系，反之不存在连接关系。</p><p><strong>【地名实体链入和链出集合计算】</strong>：计算模式参考模糊集合计算逻辑，模糊集合计算区别于简单的二值判定，认为每个轨迹链可隶属于一个及以上地名实体对应的理想集，也就是说每条轨迹链可与任意地名实体存在关联关系，只是关联程度存在一定差异，这种处理策略更符合用户进行路径选择时的心理认知，默认初始状态下地名实体之间形成完全连通图，随着历史轨迹链集合的不断丰富，完全连通图中的某些路径由于不断被选择而得到强化，有些路径则始终处于初始状态或缓慢强化的状态。</p><p><strong>【基于链接分析结果的推荐策略研究】</strong>：基于链入和链出集合计算结果, 结合用户需求，可有效实现路线的推荐, 目前在推荐领域应用较多的方法包括: 协同过滤、基于内容的推荐、基于知识的推荐、混合推荐等, 其中协同过滤是应用最为广泛的推荐算法, 但本文采用的推荐算法是融合模糊集合计算的改进协同过滤算法。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 实体链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word2vec中文词向量训练</title>
      <link href="2020/05/28/word2vec_report/"/>
      <url>2020/05/28/word2vec_report/</url>
      
        <content type="html"><![CDATA[<h1 id="word2vec中文词向量训练"><a href="#word2vec中文词向量训练" class="headerlink" title="word2vec中文词向量训练"></a>word2vec中文词向量训练<br></h1><span id="more"></span><h2 id="1、genism库"><a href="#1、genism库" class="headerlink" title="1、genism库"></a>1、genism库<br></h2><p>gensim库中提供了word2vec的cbow模型和skipgram模型的实现，可直接调用</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec1.png?raw=true" alt="image" loading="lazy"></p><p>完整版参考代码<br><br><br></p><h2 id="2、tensorflow实现skipgram模型"><a href="#2、tensorflow实现skipgram模型" class="headerlink" title="2、tensorflow实现skipgram模型"></a>2、tensorflow实现skipgram模型<br></h2><p>skipgram模型使用中心词预测上下文，网上介绍很多了也可直接去看论文<br>本模型实验采用的数据时wiki百科中文数据，有原版和分词后版本，数据量大下载请移步<br>实现详细直接看代码，代码中关键处都有注释，这里提一下word2vec中常用的nce loss损失函数，nce loss函数个参数定义如下</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec2.png?raw=true" alt="image" loading="lazy"></p><p>解释一下参数sampled_values，从tensorflow的nce_loss源代码中可以看到当sampled_ values=None时采样方式，word2vec中负采样过程其实就是优选采样词频高的词作负样本</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec3.png?raw=true" alt="image" loading="lazy"></p><p>在上图中展现了nce_loss在实际使用过程中参数列表以及各个参数的含义，下面我们看一下tensorflow源码中对于nce_loss函数的实现逻辑：</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec4.png?raw=true" alt="image" loading="lazy"></p><p>Tensorflow实现skipgram模型完整细节参考代码，训练测试效果可参见下图：</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec5.png?raw=true" alt="image" loading="lazy"></p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec6.png?raw=true" alt="image" loading="lazy"></p><h1 id="word2vec细节简介"><a href="#word2vec细节简介" class="headerlink" title="word2vec细节简介"></a>word2vec细节简介</h1><h2 id="1、word2vec种语言模型"><a href="#1、word2vec种语言模型" class="headerlink" title="1、word2vec种语言模型"></a>1、word2vec种语言模型</h2><p>word2vec属于预测式词向量模型，两种Skipgram和CBOW<br></p><p>(1) skipgram通过中间词预测周围词构建网络模型<br></p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec7.png?raw=true" alt="image" loading="lazy"></p><p>(2) cbow通过周围词预测中间词构建网络模型<br></p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec8.png?raw=true" alt="image" loading="lazy"></p><h2 id="2、word2vec中Tricks"><a href="#2、word2vec中Tricks" class="headerlink" title="2、word2vec中Tricks:"></a>2、word2vec中Tricks:</h2><p>(1) Hierarchical softmax<br></p><p>分层softmax最主要的改进既是：不需要对网络W个单词的输出计算概率分布，只需要评估个节点即可<br></p><p>(2) Negative sampling<br></p><p>详细介绍一下负采样，word2vec中训练技巧：负采样<br><br>通过模型的一次训练来解释负采样的过程，以skip_gram模型训练为例进行讲解<br></p><p>训练样本输入词是：love，输出词是me，如果词典中有10000个词，设定训练出的词向量大小为300，则开始love和me都是通过one-hot编码的，在输出位置上me对应的是1，其他位置都是0，我们认为这些0位置对应的词即是负样本，1位置对应的是正样本，在不采用负采样情况下隐层到输出层的参数为300<em>10000，负采样的意思即是我们只在9999个负样本中选择很少一部分对应的参数进行更新（包括正样本的也更新），其他没有挑中的负样本参数保持不变，例如我们选择5个negative words进行参数更新，加上一个正样本总共是6个，因此参数是300</em>6，大大提高每次训练的计算效率，论文中指出对于小规模数据集我们选择5-20个negative words较好，在数据集情况下选择2-5个负样本较好<br></p><p>(3) Subsampling of Frequent words<br></p><p>频繁词的二次采样，根据论文描述在大的语料库中，频繁词如容易出现很多次的the\in\a提供的信息量远没有罕见词提供的信息量多，因此在后续的训练中频繁词无法提供更多的信息甚至会将网络带偏，因此提出了频繁词二次采样方式：即在每次训练时按照如下公式对训练集的单词wi进行丢弃：<br></p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec9.png?raw=true" alt="image" loading="lazy"></p><p>CBOW模型的优化函数(skipgram模型类似)：<br></p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/word2vec10.png?raw=true" alt="image" loading="lazy"></p><p>(4) word2vec是静态词向量预训练模型，词向量是固定的，不能解决多义词问题，无法考虑预料全局信息<br></p>]]></content>
      
      
      <categories>
          
          <category> word2vec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> python </tag>
            
            <tag> word2vec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Two Sum</title>
      <link href="2020/04/13/1.TwoSum/"/>
      <url>2020/04/13/1.TwoSum/</url>
      
        <content type="html"><![CDATA[<p><strong>Description:</strong></p><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p><strong>Example:</strong></p><p>Given nums = [2, 7, 11, 15], target = 9,</p><p>Because nums[0] + nums[1] = 2 + 7 = 9,</p><p>return [0, 1].</p><p><strong>Discuss:</strong></p><p>1.暴力法:</p><p>时间复杂度: O(n^2)</p><p>空间复杂度: O(1)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>2.Hash表</p><p>时间复杂度: O(n)</p><p>空间复杂度: O(n)</p><p>思路:利用哈希表将数组中的值依次存入，并且在数组遍历过程中找到另一个值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span>  map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>                    <span class="token keyword">return</span> r<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本相似度分析</title>
      <link href="2020/04/02/%E6%96%87%E6%9C%AC%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>2020/04/02/%E6%96%87%E6%9C%AC%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Siamese Network 是一种神经网络的框架，而不是具体的某种网络,Siamese Network用于评估两个输入样本的相似度。网络的框架如下图所示</p><span id="more"></span><p><img src="https://whh.plus/images//Siamese1.png" alt="siamese" loading="lazy"></p><p>Siamese Network有两个结构相同，且共享权值的子网络。分别接收两个输入X1与X2，将其转换为向量Gw(X1)与Gw(X2)，再通过某种距离度量的方式计算两个输出向量的距离Ew。</p><p>训练Siamese Network采用的训练样本是一个tuple (X1,X2,y)，标签y=0表示X1与X2属于不同类型(不相似、不重复、根据应用场景而定)。y=1则表示X1与X2属于相同类型(相似)。</p><p>LOSS函数的设计应该是 </p><ol><li>当两个输入样本不相似(y=0)时，距离Ew越大，损失越小，即关于Ew的单调递减函数。 </li><li>当两个输入样本相似(y=1)时，距离Ew越大，损失越大，即关于Ew的单调递增函数。</li></ol><p>用L+(X1,X2)表示y=1时的LOSS， L−(X1,X2)表示y=0时的LOSS，则LOSS函数可以写成如下形式</p><p>Lw(X1,X2)=(1−y)L−(X1,X2)+yL+(X1,X2)</p><p>Siamese Network的基本架构、输入、输出以及LOSS函数的设计原则如上文.</p><p>LSTM Siamese Network总结起来就是 </p><ol><li>将Siamese Network中的Encoder换成BILSTM </li><li>将距离的计算改成余弦距离 </li><li>修改相应的LOSS函数</li></ol><p>这个设计上还是有一些可以改进的，比如在BILSTM输出后，加一个attention，而不是直接average每个时刻的输出，这样可以更好的表征输入的文本。</p><p><a href="">BiLSTM介绍</a></p><p><img src="https://whh.plus/images//Siamese2.png" alt="BiLSTM" loading="lazy"></p><p>损失函数：<br><img src="https://whh.plus/images//Siamese3.png" alt="loss" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 文本相似度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda</title>
      <link href="2020/03/31/Anaconda/"/>
      <url>2020/03/31/Anaconda/</url>
      
        <content type="html"><![CDATA[<p>1.查看创建好的环境：</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda info --envs</code></pre><p>2.激活/进入环境</p><pre class="language-bash" data-language="bash"><code class="language-bash">activate env_name</code></pre><span id="more"></span><p>3.退出当前环境到base</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda deactivate</code></pre><p>4.新建一个环境</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda create --n name <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.6</span></code></pre><p>5.删除一个环境</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda remove -n name --all</code></pre><p>6.环境重命名</p><p>通过克隆旧环境，再删除旧环境得到</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入旧环境</span>activate old<span class="token comment"># 克隆</span>conda create -n new --clone old<span class="token comment"># 退出旧环境</span>conda deactivate<span class="token comment">#删除旧环境</span>conda remove -n old --all</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非线性规划</title>
      <link href="2020/03/31/%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
      <url>2020/03/31/%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>python非线性规划(scipy.optimize.minimize)</p><p><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html">库函数官方文档</a></p><span id="more"></span><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># minimize函数</span>scipy<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>fun<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> jac<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> hess<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> hessp<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> bounds<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>  constraints<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tol<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></code></pre><p>fun : 求最小值的目标函数</p><p>x0 : 变量的初始猜测值，如果有多个变量，需要给每个变量一个初始猜测值</p><p>method ：求极值的方法</p><p>constraints : 约束条件，针对fun中为参数的部分进行约束限制</p><p>demo:</p><p>1.计算1/x + x 的最小值</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> minimize<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 计算 1/x + x 的最小值</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>x0 <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">=</span> minimize<span class="token punctuation">(</span>fun<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">"SLSQP"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> res<span class="token punctuation">.</span>x<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x:"</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>2.计算(2+x1)/(1+x2)-3<em>x1+4</em>x3的最小值，x1,x2,x3∈(0.1,0.9)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> minimize<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 计算 (2+x1)/(1+x2)-3*x1+4*x3的最小值</span><span class="token comment"># x1,x2,x3∈(0.1,0.9)</span><span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># ineq : 表示大于等于0</span><span class="token comment"># eq : 表示等于0</span><span class="token comment"># x-0.1 >= 0</span><span class="token keyword">def</span> <span class="token function">constraint1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token comment"># 0.9-x > =0</span><span class="token keyword">def</span> <span class="token function">constraint2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">constraint3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token keyword">def</span> <span class="token function">constraint4</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">constraint5</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.1</span><span class="token keyword">def</span> <span class="token function">constraint6</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0.9</span><span class="token punctuation">)</span>con1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'ineq'</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">:</span>constraint1<span class="token punctuation">&#125;</span>con2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'ineq'</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">:</span>constraint2<span class="token punctuation">&#125;</span>con3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'ineq'</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">:</span>constraint3<span class="token punctuation">&#125;</span>con4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'ineq'</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">:</span>constraint4<span class="token punctuation">&#125;</span>con5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'ineq'</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">:</span>constraint5<span class="token punctuation">&#125;</span>con6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'ineq'</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">:</span>constraint6<span class="token punctuation">&#125;</span>cons <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>con1<span class="token punctuation">,</span>con2<span class="token punctuation">,</span>con3<span class="token punctuation">,</span>con4<span class="token punctuation">,</span>con5<span class="token punctuation">,</span>con6<span class="token punctuation">]</span><span class="token punctuation">)</span>x0 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">=</span> minimize<span class="token punctuation">(</span>fun2<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">"SLSQP"</span><span class="token punctuation">,</span>constraints<span class="token operator">=</span>cons<span class="token punctuation">)</span>x <span class="token operator">=</span> res<span class="token punctuation">.</span>x<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x1:"</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x2:"</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x3:"</span><span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol><li><p>minf(x)=x1^2+x2^2+x3^2+8</p><p> x1^2-x2+x3^2&gt;=0</p><p> x1+x2^2+x3^2&lt;=20</p><p> -x1-x2^2+2=0</p><p> x2+2x3^2=3</p><p> x1,x2,x3&gt;=0</p></li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scipy <span class="token keyword">import</span> optimize <span class="token keyword">as</span> opt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">import</span> minimize<span class="token comment"># 目标函数</span><span class="token keyword">def</span> <span class="token function">objective</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token comment"># 约束条件</span><span class="token keyword">def</span> <span class="token function">constraint1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span>  <span class="token comment"># 不等约束</span><span class="token keyword">def</span> <span class="token function">constraint2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 不等约束</span><span class="token keyword">def</span> <span class="token function">constraint3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">constraint4</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3</span>  <span class="token comment"># 不等约束</span>con1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'ineq'</span><span class="token punctuation">,</span> <span class="token string">'fun'</span><span class="token punctuation">:</span> constraint1<span class="token punctuation">&#125;</span>con2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'ineq'</span><span class="token punctuation">,</span> <span class="token string">'fun'</span><span class="token punctuation">:</span> constraint2<span class="token punctuation">&#125;</span>con3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'eq'</span><span class="token punctuation">,</span> <span class="token string">'fun'</span><span class="token punctuation">:</span> constraint3<span class="token punctuation">&#125;</span>con4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'eq'</span><span class="token punctuation">,</span> <span class="token string">'fun'</span><span class="token punctuation">:</span> constraint4<span class="token punctuation">&#125;</span>cons <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>con1<span class="token punctuation">,</span> con2<span class="token punctuation">,</span> con3<span class="token punctuation">,</span> con4<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 4个约束条件</span>x0 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 计算</span>solution <span class="token operator">=</span> minimize<span class="token punctuation">(</span>objective<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'SLSQP'</span><span class="token punctuation">,</span>constraints<span class="token operator">=</span>cons<span class="token punctuation">)</span>x <span class="token operator">=</span> solution<span class="token punctuation">.</span>x<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'目标值: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>objective<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'答案为'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x1 = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x2 = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出：</span><span class="token comment"># 目标值: 10.651091840572583</span><span class="token comment"># 答案为</span><span class="token comment"># x1 = 0.5521673412903173</span><span class="token comment"># x2 = 1.203259181851855</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式爬虫</title>
      <link href="2020/03/13/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E7%BC%96%E5%86%99/"/>
      <url>2020/03/13/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>分布式爬虫的难点不在于爬虫技术本身，而在于各服务器网络之间的通信</p><p>分布式爬虫的两种技术方案：</p><span id="more"></span><p>1、自己实现分布式爬虫(Docker+Urllib+mysql+redis)</p><p>部署Docker,镜像 mysql 、redis</p><p>2、基于Scrapy-redis实现分布式爬虫</p><p>settings.py 添加</p><pre class="language-python" data-language="python"><code class="language-python">DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">"scrapy_redis.dupefilter.RFPDupeFilter"</span>SCHEDULER <span class="token operator">=</span> <span class="token string">"scrapy_redis.scheduler.Scheduler"</span>SCHEDULER_PERSIST <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># REDIS_URL = "redis://user:passwd@IP:port"</span><span class="token comment"># REDIS_URL = "redis://@IP:port"</span>REDIS_URL <span class="token operator">=</span> <span class="token string">"redis://127.0.0.1:6379"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫常见的反爬策略与反爬攻克手段</title>
      <link href="2020/03/13/%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8F%8D%E7%88%AC%E7%AD%96%E7%95%A5%E4%B8%8E%E5%8F%8D%E7%88%AC%E6%94%BB%E5%85%8B%E6%89%8B%E6%AE%B5/"/>
      <url>2020/03/13/%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E7%9A%84%E5%8F%8D%E7%88%AC%E7%AD%96%E7%95%A5%E4%B8%8E%E5%8F%8D%E7%88%AC%E6%94%BB%E5%85%8B%E6%89%8B%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<ul><li><p>反爬策略1：通过UA限制或者其他头信息限制</p><p>  解决方案：构建用户代理池</p></li><li><p>反爬策略2：通过访问者IP限制</p><p>  解决方案：构建IP代理池</p></li></ul><span id="more"></span><ul><li><p>反爬策略3：通过验证码限制</p><p>  解决方案:手工打码、验证码接口自动识别或者通过机器学习自动识别</p></li><li><p>反爬策略4：通过数据的异步加载限制</p><p>  解决方案：抓包分析或者使用PhantomJS</p></li><li><p>反爬策略5：通过Cookie限制</p><p>  解决方案：进行Cookie处理</p></li><li><p>反爬策略6： 通过JS限制(如请求的数据通过JS随机生成)</p><p>  解决方案：分析JS解密或者使用PhantomJS</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商信息爬虫项目</title>
      <link href="2020/03/04/%E7%94%B5%E5%95%86%E4%BF%A1%E6%81%AF%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/03/04/%E7%94%B5%E5%95%86%E4%BF%A1%E6%81%AF%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<ul><li><p>目标站点: <a href="https://www.taobao.com/">淘宝</a></p></li><li><p>需求数据：指定关键词的商品数据(包括商品名、商品价格、评论数等)</p></li><li><p>要求：自动翻页并输出</p></li><li><p>选择模块: urllib</p></li></ul><span id="more"></span><ul><li><p>分析:<br>  关键词:女装</p><p>  第一页: <a href="https://s.taobao.com/search?q=%E5%A5%B3%E8%A3%85&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.2&amp;ie=utf8&amp;initiative_id=tbindexz_20170306">https://s.taobao.com/search?q=女装&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.2&amp;ie=utf8&amp;initiative_id=tbindexz_20170306</a></p><p>  第二页: <a href="https://s.taobao.com/search?q=%E5%A5%B3%E8%A3%85&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.2&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&amp;bcoffset=3&amp;ntoffset=3&amp;p4ppushleft=1,48&amp;s=44">https://s.taobao.com/search?q=女装&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.2&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&amp;bcoffset=3&amp;ntoffset=3&amp;p4ppushleft=1%2C48&amp;s=44</a></p><p>  第三页: <a href="https://s.taobao.com/search?q=%E5%A5%B3%E8%A3%85&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.2&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&amp;bcoffset=0&amp;ntoffset=6&amp;p4ppushleft=1,48&amp;s=88">https://s.taobao.com/search?q=女装&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.2&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&amp;bcoffset=0&amp;ntoffset=6&amp;p4ppushleft=1%2C48&amp;s=88</a></p><p>  url: <a href="https://s.taobao.com/search?q=%E5%A5%B3%E8%A3%85&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.2&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&amp;s=(page-1)*44">https://s.taobao.com/search?q=女装&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.2&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&amp;s=(page-1)*44</a></p><p>  <a href="https://s.taobao.com/search?q=%E5%A5%B3%E8%A3%85&amp;s=(page-1)*44">https://s.taobao.com/search?q=女装&amp;s=(page-1)*44</a></p><p>  商品名： “raw_title”:”无印良品 MUJI 女式 减轻颈部刺痛感 罗纹 高领毛衣”</p><p>  商品价格:  “view_price”:”124.00”</p><p>  评论数: </p><p>  产品链接：<a href="https://detail.tmall.com/item.htm?id=604628031536">https://detail.tmall.com/item.htm?id=604628031536</a></p><p>  “detail_url”:”//detail.tmall.com/item.htm?id\u003d604628031536\u0026ad_id\u003d\u0026am_id\u003d\u0026cm_id\u003d140105335569ed55e27b\u0026pm_id\u003d\u0026abbucket\u003d14”</p><p>  评论数： <a href="https://dsr-rate.tmall.com/list_dsr_info.htm?itemId=604628031536&amp;spuId=1372321809&amp;sellerId=2038648986&amp;groupId&amp;_ksTS=1583569497006_221&amp;callback=jsonp222">https://dsr-rate.tmall.com/list_dsr_info.htm?itemId=604628031536&amp;spuId=1372321809&amp;sellerId=2038648986&amp;groupId&amp;_ksTS=1583569497006_221&amp;callback=jsonp222</a></p><p>  “rateTotal”:1023</p><p>  “nid”:”604628031536”</p></li></ul><p>淘宝太难爬了，爬的时候需要验证登录，验证登录需要获取st!暂时先鸽了吧</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据同步神器</title>
      <link href="2020/03/02/syncthing/"/>
      <url>2020/03/02/syncthing/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.moewah.com/usr/uploads/2019/03/3082024495.jpg" alt="syncthing" loading="lazy"></p><p>最近打算同步一下数据，发现了一个口碑还不错的数据同步工具——Syncthing,是一款开源免费的数据同步工具，支持Android、Linux、Windows、Mac OS等系统，可以在任意2台设备之间，实现实时同步。通信使用TLS进行保护，所使用的加密包括完美的前向保密，很适合搭建私有同步网盘</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><p>本文只做Linux服务器和Windows电脑之间的同步安装以及演示操作。</p><h3 id="1、linux安装Syncthing"><a href="#1、linux安装Syncthing" class="headerlink" title="1、linux安装Syncthing"></a><strong>1、linux安装Syncthing</strong></h3><p>安装Syncthing:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#目前最新版v1.2.0，日后自行修改版本号</span><span class="token function">wget</span> https://github.com/syncthing/syncthing/releases/download/v1.3.4/syncthing-linux-amd64-v1.3.4.tar.gz<span class="token function">tar</span> xzvf syncthing-linux-amd64-v1.3.4.tar.gz<span class="token function">cp</span> syncthing-linux-amd64-v1.3.4/syncthing /usr/local/bin</code></pre><h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a><strong>开放端口</strong></h4><p>Syncthing 默认监听以下几个端口</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">22000</span><span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token number">8384</span><span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token number">21027</span><span class="token punctuation">(</span>UDP<span class="token punctuation">)</span><span class="token number">44647</span><span class="token punctuation">(</span>UDP<span class="token punctuation">)</span><span class="token number">37269</span><span class="token punctuation">(</span>UDP<span class="token punctuation">)</span></code></pre><p>个人使用，仅开放22000(TCP)和8384(TCP)</p><p>8384:web访问控制端口<br>22000：节点访问端口</p><p>开启Syncthing</p><pre class="language-bash" data-language="bash"><code class="language-bash">syncthing</code></pre><p>第一次启动会生成配置，内网地址是进不去的，需修改成外网地址。</p><p>修改配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /root/.config/syncthing/config.xml<span class="token comment"># 将127.0.0.1:8384改为</span><span class="token comment"># 0.0.0.0:8384</span><span class="token comment">#再次启动Syncthing</span>syncthing</code></pre><p>浏览器访问:</p><p><a href="http://server_ip:8384/">http://server_ip:8384</a></p><p>需自行开放8384端口哦</p><p>设置账号密码，其他参数暂时无需更改，重启</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/HU.png?raw=true" alt="syncthing" loading="lazy"></p><p>linux ：后台运行Syncthing</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> synchthing <span class="token operator">&amp;</span> /dev/null <span class="token operator">&amp;</span></code></pre><h3 id="2、Windows安装Syncthing"><a href="#2、Windows安装Syncthing" class="headerlink" title="2、Windows安装Syncthing"></a><strong>2、Windows安装Syncthing</strong></h3><p><a href="https://syncthing.net/downloads/">官网下载</a>对应版本的Syncthing,运行syncthing.exe</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/syncmd.png?raw=true" alt="cmd" loading="lazy"></p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/syncsetting.png?raw=true" alt="setting" loading="lazy"></p><h3 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a><strong>3、使用</strong></h3><p>在linux的页面上添加Windows的远程设备ID，自行选择指定文件夹。可在添加设备-&gt;高级-&gt;地址列表，将dynamic 填写为 tcp://server_ip:22000</p><p>设备添加完成，即可同步文件夹。</p>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>招聘信息爬虫项目</title>
      <link href="2020/03/01/%E6%8B%9B%E8%81%98%E4%BF%A1%E6%81%AF%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/03/01/%E6%8B%9B%E8%81%98%E4%BF%A1%E6%81%AF%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<ul><li><p>目标站点: <a href="http://www.51job.com/">前程无忧</a></p></li><li><p>需求数据：指定关键词的所有职位数据</p></li><li><p>要求：自动翻页并输出</p></li><li><p>选择模块: requests</p><span id="more"></span></li><li><p>分析：<br>  关键词：python</p><p>  第一页: <a href="https://search.51job.com/list/180000,000000,0000,00,9,99,python,2,1.html?lang=c&amp;stype=&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;providesalary=99&amp;lonlat=0,0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare=">https://search.51job.com/list/180000,000000,0000,00,9,99,python,2,1.html?lang=c&amp;stype=&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;providesalary=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare=</a></p><p>  第二页: <a href="https://search.51job.com/list/180000,000000,0000,00,9,99,python,2,2.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare=">https://search.51job.com/list/180000,000000,0000,00,9,99,python,2,2.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare=</a></p><p>  url：<a href="https://search.51job.com/list/180000,000000,0000,00,9,99,python,2,1.html">https://search.51job.com/list/180000,000000,0000,00,9,99,python,2,1.html</a> </p><p>  代码:</p>  <pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://search.51job.com/list/180000,000000,0000,00,9,99,python,2,1.html"</span>hd<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>hd<span class="token punctuation">)</span><span class="token comment"># 如果网页出现乱码，通传编码方式</span>data <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span>response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">,</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token comment"># print(len(data))</span>pat_pag <span class="token operator">=</span> <span class="token string">"共(.*?)条职位"</span>allline <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat_pag<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># print(allline)</span>allpage <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>allline<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">50</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>allpage<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------正在爬"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"页---------"</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"https://search.51job.com/list/180000,000000,0000,00,9,99,python,2,"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".html"</span>    <span class="token comment"># print(url)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">)</span>    <span class="token comment"># 如果网页出现乱码，通传编码方式</span>    thisdata <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">,</span> <span class="token string">"ignore"</span><span class="token punctuation">)</span>    <span class="token comment"># print(thisdata)</span>    job_url_pat<span class="token operator">=</span><span class="token string">'&lt;em class="check" name="delivery_em" onclick="checkboxClick.this.">&lt;/em>.*?href="(.*?).html'</span>    job_url_all <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>job_url_pat<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>thisdata<span class="token punctuation">)</span>    <span class="token comment"># print(len(job_url_all))</span>    <span class="token keyword">for</span> job_url <span class="token keyword">in</span> job_url_all<span class="token punctuation">:</span>        <span class="token comment"># print(job_url)</span>        thisurl<span class="token operator">=</span>job_url<span class="token operator">+</span><span class="token string">".html"</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>thisurl<span class="token punctuation">)</span>        thisdata<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span>response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">,</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>        pat_title<span class="token operator">=</span><span class="token string">'&lt;h1 title="(.*?)"'</span>        pat_company<span class="token operator">=</span><span class="token string">'&lt;p class="cname">.*?title="(.*?)"'</span>        pat_money<span class="token operator">=</span><span class="token string">'&lt;/h1>&lt;strong>(.*?)&lt;/strong>'</span>        pat_addr<span class="token operator">=</span><span class="token string">'上班地址：&lt;/span>(.*?)&lt;/p>'</span>        title <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat_title<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>thisdata<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        company <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat_company<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>thisdata<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        money <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat_money<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>thisdata<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            addr <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat_addr<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>thisdata<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>            addr <span class="token operator">=</span> <span class="token string">"空"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>company<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy爬虫项目</title>
      <link href="2020/02/29/scrapy/"/>
      <url>2020/02/29/scrapy/</url>
      
        <content type="html"><![CDATA[<p>Scrapy模块是一个非常常用的爬虫框架模块，使用Scrapy可以快速创建爬虫项目。</p><span id="more"></span><p><strong>Scrapy模块的安装</strong></p><p>建议安装顺序</p><ul><li><p>升级pip: python -m pip install –upgrade pip </p></li><li><p>安装wheel pip install wheel</p></li><li><p>安装lxml (<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud)%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%9A%84python%E7%89%88%E6%9C%AC%E4%BB%A5%E5%8F%8Awin32">https://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud)选择对应的python版本以及win32</a> or 64</p></li><li><p>安装Twisted (<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud)%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%9A%84python%E7%89%88%E6%9C%AC%E4%BB%A5%E5%8F%8Awin32">https://www.lfd.uci.edu/~gohlke/pythonlibs/#wordcloud)选择对应的python版本以及win32</a> or 64</p></li></ul><ul><li>如果使用pycharm可以在Setting -&gt; Project -&gt; Project Interpreter 点击 + 添加最新的库</li></ul><ul><li><p>pip install scrapy 或 pip install scrapy==1.1.0rc3</p></li><li><p>下载安装pywin32并配置 </p></li></ul><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/pythoncom38.png?raw=true" alt="pywin32" loading="lazy"></p><p>将这俩dll复制到system32(由于权限问题需手动确认一遍)</p><hr><p><strong>Scrapy常用指令实战</strong></p><table><thead><tr><th align="center">指令</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">startproject</td><td align="center">创建爬虫项目</td></tr><tr><td align="center">genspider -l</td><td align="center">查看爬虫模板</td></tr><tr><td align="center">genspider -t</td><td align="center">模板 爬虫文件名 域名 创建爬虫</td></tr><tr><td align="center">crawl</td><td align="center">运行爬虫</td></tr><tr><td align="center">list</td><td align="center">查看有哪些爬虫</td></tr></tbody></table><ul><li>创建爬虫项目</li></ul><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/startproject.png?raw=true" alt="startproject" loading="lazy"></p><p>创建完成之后的项目目录:</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/scrapy.png?raw=true" alt="startproject" loading="lazy"></p><p>scrapy.cfg: 项目配置文件</p><p><em>init</em>.py ： 初始化文件</p><p>items.py : 定义目标信息</p><p>spiders ：存放多个爬虫文件</p><p>middlewares.py : 中间件</p><p>pipelines.py : 爬后处理(例如写入数据库…)</p><p>settings.py : 总体设置信息</p><ul><li>指令测试</li></ul><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/scrapy_g.png?raw=true" alt="指令测试" loading="lazy"></p><hr><p><strong>Scrapy爬虫项目编写基础</strong></p><ul><li><p>创建爬虫项目</p></li><li><p>编写items</p></li></ul><pre class="language-python" data-language="python"><code class="language-python">title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p>创建爬虫文件</p></li><li><p>编写爬虫文件</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> wh_first<span class="token punctuation">.</span>items <span class="token keyword">import</span> WhFirstItem<span class="token keyword">class</span> <span class="token class-name">FstSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'fst'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aliwx.com.cn'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.aliwx.com.cn/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        item<span class="token operator">=</span>WhFirstItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//p[@class='title']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># print(item["title"])</span>        <span class="token keyword">yield</span> item</code></pre><ul><li>编写pipelines</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>配置settings</li></ul><pre class="language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'wh_first.pipelines.WhFirstPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p><strong>使用Scrapy编写当当网商品数据爬虫实战</strong></p><ul><li><p>目标站点：<a href="http://category.dangdang.com/cp01.03.41.00.00.00.html">当当</a></p></li><li><p>需求数据：商品标题、链接、评论数等数据</p></li><li><p>要求：自动翻页并自动写入数据库</p></li></ul><p><a href="https://github.com/wentianhao/pyhton">源码</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request模块爬虫</title>
      <link href="2020/02/28/request/"/>
      <url>2020/02/28/request/</url>
      
        <content type="html"><![CDATA[<p><strong>Request模块的基础使用</strong></p><ul><li>安装request</li></ul><pre class="language-python" data-language="python"><code class="language-python">pip install requests</code></pre><ul><li>使用方法<ul><li>请求方式： get、post、put…</li><li>参数：<table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">params</td><td align="center">get请求的参数</td></tr><tr><td align="center">headers</td><td align="center">伪装浏览器添加头信息</td></tr><tr><td align="center">proxies</td><td align="center">添加代理</td></tr><tr><td align="center">cookies</td><td align="center">添加cookie</td></tr><tr><td align="center">data</td><td align="center">post请求</td></tr></tbody></table></li><li>属性：<table><thead><tr><th align="center">属性</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">对应请求响应数据</td></tr><tr><td align="center">content</td><td align="center">二进制类型的相应数据</td></tr><tr><td align="center">encoding</td><td align="center">网页编码</td></tr><tr><td align="center">cookies</td><td align="center">相应cookie</td></tr><tr><td align="center">url</td><td align="center">当前请求的url</td></tr><tr><td align="center">status</td><td align="center">状态码</td></tr></tbody></table><span id="more"></span></li></ul></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token comment"># 伪装浏览器</span>hd <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user-agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span><span class="token punctuation">&#125;</span><span class="token comment"># 添加代理</span>px <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"http"</span><span class="token punctuation">:</span><span class="token string">"http://127.0.0.1:8888"</span><span class="token punctuation">&#125;</span><span class="token comment"># 添加cookies</span>cookies<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">""</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token comment"># get请求</span>rst <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.aliwx.com.cn/"</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>hd<span class="token punctuation">,</span>proxies<span class="token operator">=</span>px<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span>title <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"&lt;title>(.*?)&lt;/title>"</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>rst<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token comment"># www.baidu.com/s?wd="阿里文学"</span>pr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"wd"</span><span class="token punctuation">:</span><span class="token string">"阿里文学"</span><span class="token punctuation">&#125;</span>rst2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com/s"</span><span class="token punctuation">,</span>params<span class="token operator">=</span>pr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rst2<span class="token punctuation">)</span><span class="token comment"># text 、 content、 encoding、url、status_code</span><span class="token keyword">print</span><span class="token punctuation">(</span>rst2<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rst2<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rst2<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rst2<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rst2<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment"># cookie 转化为字典</span>cookie  <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>rst2<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token comment"># post请求</span>postdata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"www"</span><span class="token punctuation">,</span><span class="token string">"pass"</span><span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">&#125;</span>rst3 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"https://www.iqianyue.com/mypost/"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>postdata<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rst3<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><hr><p><strong>使用requests模块实现云栖社区博文爬虫实战</strong></p><p>目标站点：<a href="https://yq.aliyun.com/">云栖社区</a></p><p>需求数据：指定关键词的博文数据</p><p>要求：自动翻页并下载到本地</p><p>分析：</p><p>第二页url：<a href="https://yq.aliyun.com/search/articles/?spm=a2c4e.11163080.searchblog.155.44fb2ec1RCP5cT&amp;q=python&amp;idx=default&amp;days=&amp;p=2">https://yq.aliyun.com/search/articles/?spm=a2c4e.11163080.searchblog.155.44fb2ec1RCP5cT&amp;q=python&amp;idx=default&amp;days=&amp;p=2</a></p><p>第三页url：<a href="https://yq.aliyun.com/search/articles/?spm=a2c4e.11163080.searchblog.165.4a4f2ec1GkHbdt&amp;q=python&amp;idx=default&amp;days=&amp;p=3">https://yq.aliyun.com/search/articles/?spm=a2c4e.11163080.searchblog.165.4a4f2ec1GkHbdt&amp;q=python&amp;idx=default&amp;days=&amp;p=3</a></p><p>spm、idx、days测试去掉有无影响 (无影响)</p><p>第二页有效url：<a href="https://yq.aliyun.com/search/articles/?q=python&amp;p=2">https://yq.aliyun.com/search/articles/?q=python&amp;p=2</a></p><p>第三页有效url: <a href="https://yq.aliyun.com/search/articles/?q=python&amp;p=3">https://yq.aliyun.com/search/articles/?q=python&amp;p=3</a></p><p>源码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 目标站点：[云栖社区](https://yq.aliyun.com/)</span><span class="token comment">#</span><span class="token comment"># 需求数据：指定关键词的博文数据</span><span class="token comment">#</span><span class="token comment"># 要求：自动翻页并下载到本地</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> timekey <span class="token operator">=</span> <span class="token string">"python"</span>url <span class="token operator">=</span> <span class="token string">"https://yq.aliyun.com/search/articles/"</span>data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"q"</span><span class="token punctuation">:</span>key<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textpat1 <span class="token operator">=</span> <span class="token string">'&lt;div class="_search-info">找到(.*?)条关于'</span>allline<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat1<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>allpage<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>allline<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">15</span><span class="token operator">+</span><span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------正在爬第"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"页-------------"</span><span class="token punctuation">)</span>    index<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    getdata<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"q"</span><span class="token punctuation">:</span>key<span class="token punctuation">,</span>            <span class="token string">"p"</span><span class="token punctuation">:</span>index<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>    data<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>getdata<span class="token punctuation">)</span><span class="token punctuation">.</span>text    pat_url<span class="token operator">=</span> <span class="token string">'&lt;div class="media-body text-overflow">.*?&lt;a href="(.*?)">'</span>    articles<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat_url<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> articles<span class="token punctuation">:</span>        thisurl<span class="token operator">=</span><span class="token string">"https://yq.aliyun.com"</span><span class="token operator">+</span>j        thisdata<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>thisurl<span class="token punctuation">)</span><span class="token punctuation">.</span>text        pat_title<span class="token operator">=</span><span class="token string">'&lt;p class="hiddenTitle">(.*?)&lt;/p>'</span>        title<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat_title<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>thisdata<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        pat_content<span class="token operator">=</span><span class="token string">'&lt;div class="content-detail unsafe markdown-body">(.*?) &lt;div class="copyright-outer-line">'</span>        content<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat_content<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>thisdata<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        fh<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./blog/"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".html"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title<span class="token operator">+</span><span class="token string">"&lt;br />&lt;br />"</span><span class="token operator">+</span>content<span class="token punctuation">)</span>        fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包分析技术精讲</title>
      <link href="2020/02/27/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E7%B2%BE%E8%AE%B2/"/>
      <url>2020/02/27/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF%E7%B2%BE%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<ul><li>Fiddler是一款使用起来非常方便的抓包工具，安装起来很方便。</li></ul><p>实战：抓取腾讯视频下的评论</p><span id="more"></span><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> re<span class="token comment"># 抓取腾讯视频下的评论</span>cid <span class="token operator">=</span> <span class="token string">"0"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"页的评论数据"</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"https://video.coral.qq.com/varticle/4831064204/comment/v2?callback=_varticle4831064204commentv2&amp;orinum=10&amp;oriorder=o&amp;pageflag=1&amp;cursor="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        cid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;scorecursor=0&amp;orirepnum=2&amp;reporder=o&amp;reppageflag=1&amp;source=132&amp;_=1582873152540"</span>    data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>    pat <span class="token operator">=</span> <span class="token string">'"content":"(.*?)"'</span>    comments <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> comments<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span>    pat2 <span class="token operator">=</span> <span class="token string">'"last":"(.*?)"'</span>    cid <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat2<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专业英语</title>
      <link href="2020/02/27/%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD/"/>
      <url>2020/02/27/%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<ul><li><p>世界著名的三大科技文献检索系统</p><ul><li>SCI 科学引文索引</li><li>EI 工程索引</li><li>ISTP 科技会议录索引</li></ul></li><li><p>高质量文章标准 High-quality paper criteria</p><ul><li>SCI影响因子</li><li>推荐 &amp; 口碑 （CCF推荐期刊，北大核心）（nature 、cell 、Springer 、Elsciver ）</li><li>引用量 （google引用、SCI引用）<span id="more"></span>小结：<br><img src="https://whh.plus/images/IR.png" alt="IR" loading="lazy"></li></ul></li></ul><hr><p>three-pass reading method：</p><ul><li>First pass: Read the title,abstract,introduction,and subsection headings and conclusion. Take note!Ignore the math!</li><li>Second pass: Read all the text,understand the math,run the associated code to repeat the experiment,other articles/summary/comments related to the paper.Take note!</li><li>Third pass: all about math. Break down the equation</li></ul><p>seven tips for a stand-out presentation</p><ol><li>know your audience</li><li>use structure to build on ideas</li><li>use visuals (pictures,figures…)</li><li>Repetition is your friend</li><li>have a story to tell</li><li>be relatable,be authentic,and be enthusiasm</li><li>build your confidence with practice</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python Error</title>
      <link href="2020/02/25/PythonError/"/>
      <url>2020/02/25/PythonError/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>记录python的各种错误！</p><span id="more"></span><h2 id="ModuleNotFoundError"><a href="#ModuleNotFoundError" class="headerlink" title="ModuleNotFoundError"></a>ModuleNotFoundError</h2><ul><li>关于ModuleNotFoundError: No module named ‘urllib.request’; ‘urllib’ is not a package的问题</li></ul><ul><li><p>重名导致urllib包无效化</p><p>(1) 正在使用import urllib的文件命名就是urllib.py文件 </p><p>(2) 正在使用的文件的文件夹目录下有一个urllib.py的文件，导致import urllib 实际上导入的是当前目录的urllib.py文件而不是urllib库文件</p></li><li><p>解决方法：</p><p>  修改文件名即可</p></li></ul><!-- more --><h2 id="Ubuntu18-04默认python2-7，安装python3-6并切换默认python版本"><a href="#Ubuntu18-04默认python2-7，安装python3-6并切换默认python版本" class="headerlink" title="Ubuntu18.04默认python2.7，安装python3.6并切换默认python版本"></a>Ubuntu18.04默认python2.7，安装python3.6并切换默认python版本</h2><p>1.查看python版本</p><pre class="language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>V<span class="token comment"># 安装python3.6</span>apt<span class="token operator">-</span>get install python3<span class="token punctuation">.</span><span class="token number">6</span></code></pre><p>2.查看系统python的可用环境列表</p><pre class="language-python" data-language="python"><code class="language-python">update<span class="token operator">-</span>alternatives <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">list</span> python</code></pre><p>若显示 update-alternatives: error: no alternatives for python,则：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 版本号根据自己安装的设定</span>update<span class="token operator">-</span>alternatives <span class="token operator">-</span><span class="token operator">-</span>install <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>python python <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>python2<span class="token punctuation">.</span><span class="token number">7</span> <span class="token number">1</span>update<span class="token operator">-</span>alternatives <span class="token operator">-</span><span class="token operator">-</span>install <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>python python <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">6</span> <span class="token number">2</span></code></pre><p>3.配置python环境</p><pre class="language-python" data-language="python"><code class="language-python">update<span class="token operator">-</span>alternatives <span class="token operator">-</span><span class="token operator">-</span>config python</code></pre><p>选择你想默认的版本的编号即可。</p><p><a href="https://www.jb51.net/article/163117.htm">参考文章</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Urllib爬虫项目</title>
      <link href="2020/02/25/urllib/"/>
      <url>2020/02/25/urllib/</url>
      
        <content type="html"><![CDATA[<p>Urllib模块是一个可以用于编写爬虫的非常常用的模块</p><span id="more"></span><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> re<span class="token keyword">import</span> randomurl <span class="token operator">=</span> <span class="token string">"http://www.jd.com"</span><span class="token comment"># 爬到内存中</span>jd <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>jd<span class="token punctuation">)</span><span class="token punctuation">)</span>pat <span class="token operator">=</span> <span class="token string">"&lt;title>(.*?)&lt;/title>"</span>title <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>jd<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token comment"># 爬到硬盘文件中</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>url<span class="token punctuation">,</span>filename<span class="token operator">=</span><span class="token string">"./jd.html"</span><span class="token punctuation">)</span><span class="token comment"># 浏览器伪装</span>url2 <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/"</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span><span class="token punctuation">)</span>UA <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span><span class="token punctuation">)</span>opener<span class="token punctuation">.</span>addheaders<span class="token operator">=</span><span class="token punctuation">[</span>UA<span class="token punctuation">]</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 用户代理池，希望对象服务器更难识别爬虫</span><span class="token comment"># 使用多个浏览器标识</span>uapools<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0"</span><span class="token punctuation">,</span>    <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18363"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">UA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    opener<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span><span class="token punctuation">)</span>    thisua <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>uapools<span class="token punctuation">)</span>    ua <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span>thisua<span class="token punctuation">)</span>    opener<span class="token punctuation">.</span>addheaders<span class="token operator">=</span><span class="token punctuation">[</span>ua<span class="token punctuation">]</span>    urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>opener<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前UA ："</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>thisua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    UA<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>简单实战：爬取糗事百科热门并翻页</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Let&#39;s Encrypt 申请免费的Https证书</title>
      <link href="2020/02/22/Encrypt/"/>
      <url>2020/02/22/Encrypt/</url>
      
        <content type="html"><![CDATA[<h2 id="Let’s-Encrypt证书"><a href="#Let’s-Encrypt证书" class="headerlink" title="Let’s Encrypt证书"></a>Let’s Encrypt证书</h2><p>cerbot可以通过简单的命令来生成证书是免费的，而且还支持通配符证书，通配符证书指的是一个可以被多个子域名使用的公钥证书，多个子域名使用起来十分方便。申请和配置的流程简单，有效期90天，可以通过脚本更新证书。 </p><span id="more"></span><hr><h2 id="Cerbot"><a href="#Cerbot" class="headerlink" title="Cerbot"></a><strong>Cerbot</strong></h2><p>cerbot可以通过简单的命令来生成证书</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/certbot/certbot</code></pre><hr><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a><strong>申请证书</strong></h2><p>在申请Let’s Encrypt证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</p><ul><li>dns-01:给域名添加一个DNS TXT 记录</li><li>http-01:在域名对应的web服务器下放置一个HTTP well-known URL资源文件</li><li>tls-sni-01:在域名对应的web服务器下放置一个HTTPS well-known URL资源文件</li></ul><p>对于通配符域名只能通过dns-01的方式申请，在阿里购买的域名需要在阿里云的解析设置中添加解析记录。使用下面的命令生成证书，注意将*.example.com 和 example.com替换成自己的域名</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> cerbot./cerbot-auto certonly --manual <span class="token punctuation">\</span> -d *.whh.plus <span class="token punctuation">\</span> -d whh.plus --agree-tos <span class="token punctuation">\</span> --manual-public-ip-logging-ok --preferred-challenges <span class="token punctuation">\</span> dns-01 --server https://acme-v02.api.letsencrypt.org/directory </code></pre><p>输入完上面命令之后，需要下载一堆依赖库，然后输入邮箱：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Saving debug log to /var/log/letsencrypt/letsencrypt.logPlugins selected: Authenticator manual, Installer NoneEnter email address <span class="token punctuation">(</span>used <span class="token keyword">for</span> urgent renewal and security notices<span class="token punctuation">)</span> <span class="token punctuation">(</span>Enter <span class="token string">'c'</span> tocancel<span class="token punctuation">)</span>: xxxxxxx@email.com</code></pre><p>验证域名所有权：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Please deploy a DNS TXT record under the name_acme-challenge.example.com with the following value:    mhumL1xJOHPIZtFTEm4rotjJnR9TdkBVPuCS9YHvNjsBefore continuing, verify the record is deployed.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Press Enter to Continue</code></pre><p>打开域名添加解析记录，记录类型选择TXT，主机记录输入_acme-challenge.example.com,记录值输入随机生成的字符串mhumL1xJOHPIZtFTEm4rotjJnR9TdkBVPuCS9YHvNjs。</p><hr><h2 id="配置Https访问"><a href="#配置Https访问" class="headerlink" title="配置Https访问"></a><strong>配置Https访问</strong></h2><p>nginx.conf</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置 http 自动跳转到 https</span>server <span class="token punctuation">&#123;</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    server_name example.com<span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>                                      <span class="token punctuation">&#125;</span><span class="token comment"># 监听 443 端口，转发请求到 3000 端口</span>server <span class="token punctuation">&#123;</span>    listen <span class="token number">443</span><span class="token punctuation">;</span>    server_name example.com<span class="token punctuation">;</span>    location / <span class="token punctuation">&#123;</span>        <span class="token comment">#选择的服务端口</span>        <span class="token comment">#proxy_pass http://127.0.0.1:3000;</span>        <span class="token comment"># blog地址，参照部署那篇文章</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 开启 ssl 并指定证书文件和秘钥的位置</span>    ssl on<span class="token punctuation">;</span>    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem<span class="token punctuation">;</span>            ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>                                                                                     </code></pre><h2 id="续期"><a href="#续期" class="headerlink" title="续期"></a>续期</h2><p>1.下载letsencrypt</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/letsencrypt/letsencrypt</code></pre><p>2.关闭nginx服务器</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> nginx stop</code></pre><p>3.执行更新证书脚本</p><pre class="language-bash" data-language="bash"><code class="language-bash">./letsencrypt-auto certonly --standalone --email XXXX@qq.com -d XXX.XXX.com</code></pre><p>–email 是设置的邮箱</p><p>-d 是设置对应的域名目录 </p><p>当消息出现 “IMPORTANT NOTES:</p><ul><li>Congratulations! ”</li></ul><p>说明续期成功！</p><p>4.更改文件夹名</p><p>将新生成的文件夹改为nginx配置文件中的文件夹名</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> whh.plus-00001 whh.plus</code></pre><p>5.重新开启nginx服务器</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> nginx start</code></pre><hr><p>nginx配置: <a href="https://whh.plus/2020/01/20/hexo-to-your-server/">https://whh.plus/2020/01/20/hexo-to-your-server/</a></p><hr><h2 id="替代方法"><a href="#替代方法" class="headerlink" title="替代方法"></a>替代方法</h2><p>最近在重新配置letsencrypt的时候，出现了如下错误:</p><pre class="language-bash" data-language="bash"><code class="language-bash">Skipping bootstrap because certbot-auto is deprecated on this system.Your system is not supported by certbot-auto anymore.Certbot cannot be installed.Please visit https://certbot.eff.org/ to check <span class="token keyword">for</span> other alternatives.</code></pre><p>在github中certbot的(release)[<a href="https://github.com/certbot/certbot/releases]%E6%9B%B4%E6%96%B0%E4%B8%AD%E8%AF%B4%E6%98%8E">https://github.com/certbot/certbot/releases]更新中说明</a></p><p>certbot-auto不再支持所有的操作系统！根据作者的说法，certbot团队认为维护certbot-auto在几乎所有流行的UNIX系统以及各种环境上的正常运行是一项繁重的工作，加之certbot-auto是基于python 2编写的，而python 2即将寿终正寝，将certbot-auto迁移至python 3需要大量工作，这非常困难，因此团队决定放弃certbot-auto的维护</p><p>替代方法：使用基于snap的新的分发方法</p><p>1.安装snap</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> snapd</code></pre><p>2.添加路径</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"export PATH=<span class="token environment constant">$PATH</span>:/snap/bin"</span> <span class="token operator">>></span> ~/.bashrc <span class="token comment">#bash</span><span class="token builtin class-name">source</span> ~/.bashrc<span class="token builtin class-name">echo</span> <span class="token string">"export PATH=<span class="token environment constant">$PATH</span>:/snap/bin"</span> <span class="token operator">>></span> ~/.zshrc <span class="token comment">#zsh</span><span class="token builtin class-name">source</span> ~/.zshrc</code></pre><p>3.将snap更新至最新版本</p><pre class="language-bash" data-language="bash"><code class="language-bash">snap <span class="token function">install</span> coresnap refresh core</code></pre><p>4.安装certbot</p><pre class="language-bash" data-language="bash"><code class="language-bash">snap <span class="token function">install</span> --classic certbot</code></pre><p>5.生成证书<br>确保nginx处于运行状态，需要获取证书的站点在80端口，并且可以正常访问。</p><pre class="language-bash" data-language="bash"><code class="language-bash">certbot certonly --nginx --email xxx@mail.com -d a.do.com</code></pre><p>更新nginx配置并重启nginx</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> nginx stopnginx -c etc/nginx/nginx.confnginx -s reload<span class="token function">service</span> nginx start</code></pre><p>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)问题的解决</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">fuser</span> -k <span class="token number">80</span>/tcp <span class="token comment"># 将进程杀死后，启动nginx</span></code></pre><p>or</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -A <span class="token operator">|</span> <span class="token function">grep</span> nginx    <span class="token comment"># 杀死对应的两个进程之后，启动nginx</span><span class="token function">kill</span> -9 pid1<span class="token function">kill</span> -9 pid2 </code></pre><p>6.更新证书</p><pre class="language-bash" data-language="bash"><code class="language-bash">certbot renew</code></pre><p>参考以及感谢: </p><ul><li><a href="https://juejin.im/post/5c2aefb3f265da6157059430">https://juejin.im/post/5c2aefb3f265da6157059430</a></li><li><a href="https://jingyan.baidu.com/article/ff42efa9fc231fc19e220218.html">https://jingyan.baidu.com/article/ff42efa9fc231fc19e220218.html</a></li><li><a href="https://blog.csdn.net/zhangpeterx/article/details/104093318">https://blog.csdn.net/zhangpeterx/article/details/104093318</a></li><li><a href="https://blog.csdn.net/Dancen/article/details/112571444">https://blog.csdn.net/Dancen/article/details/112571444</a></li><li><a href="https://blog.csdn.net/gwdgwd123/article/details/104068563">https://blog.csdn.net/gwdgwd123/article/details/104068563</a></li><li><a href="https://blog.csdn.net/qq_27252133/article/details/53646986">https://blog.csdn.net/qq_27252133/article/details/53646986</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python处理字符串</title>
      <link href="2020/02/22/python%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2020/02/22/python%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<ol><li>使用正则表达式来获取字符串中需要的字符</li></ol><pre class="language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>正则表达式<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>源字符串<span class="token punctuation">)</span></code></pre><p><a href="https://whh.plus/2020/02/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/">正则表达式基础</a></p><span id="more"></span><ol start="2"><li>strip(),rstrip(),lstrip()</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'  ---abc123+++  '</span><span class="token comment"># 删除两边空字符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 删除左边空字符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 删除右边空字符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 删除两边的 - + 和空字符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'-+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>删除单个固定位置字符 : 切片 + 拼接</li></ol><pre class="language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'abc:123'</span><span class="token comment">#字符串拼接方式去掉冒号</span>s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span></code></pre><ol start="4"><li>删除任意位置字符同时删除多种不同字符：replace(),re.sub()</li></ol><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 去掉字符串中相同的字符</span>s <span class="token operator">=</span> <span class="token string">'af123adsa'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>repace<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'\r\nabc\t123\nxyz'</span><span class="token comment"># 去除\r \n \t 字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'[\r\n\t]'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="5"><li>同时删除多种不同字符 translate() str.maketrans()做映射</li></ol><pre class="language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">'abc123xyz'</span><span class="token comment"># a _> x,b_>y,c_>z，字符映射加密</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'abcxyz'</span><span class="token punctuation">,</span><span class="token string">'xyzabc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># translate把其转换成字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'abcxyz'</span><span class="token punctuation">,</span><span class="token string">'xyzabc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ol start="6"><li>分割字符串</li></ol><ul><li>str.split()</li></ul><p>利用字符串函数split分割，分割后返回的是分割部分的字符列表，每次只能处理一个分隔符</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'abc,123 efg,567'</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># print : ['abc,123','efg,567']</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token comment"># print : ['abc','123 efg','567']</span></code></pre><ul><li>re.split()</li></ul><p>利用re模块的split函数对字符串进行分割，分割后返回的是分割部分的字符列表，可以实现一次性分割多种分隔符</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'abc,123 efg,567'</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'[, ]'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># print : ['abc','123','efg','567']</span></code></pre><ul><li>str.partition()</li><li>利用字符串函数partition或者rpartition实现字符串分割</li></ul><p>这俩函数都只接收一个分割字符串作为参数,将目标字符串分割为两个部分，返回一个三元元组(head,sep,tail),包含分割符。细微区别在于前者从目标字符串的末尾也就是右边开始搜索分割符</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"abc,123 efg,567"</span><span class="token builtin">str</span><span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token comment"># print:('abc',',','123 efg,567')</span><span class="token builtin">str</span><span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token comment"># print: ('abc,123 efg',',','567')</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python处理excel数据</title>
      <link href="2020/02/22/python%E5%A4%84%E7%90%86excel%E6%95%B0%E6%8D%AE/"/>
      <url>2020/02/22/python%E5%A4%84%E7%90%86excel%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>安装xlrd 和xlwt 库(python3)</li></ol><pre class="language-python" data-language="python"><code class="language-python">pip install xlrd<span class="token punctuation">,</span>xlwt</code></pre><span id="more"></span><p>2.使用方法</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xlrd<span class="token punctuation">,</span>xlwt<span class="token keyword">from</span> xlutils<span class="token punctuation">.</span>copy <span class="token keyword">import</span> copy<span class="token comment"># 打开需要操作的excel表</span>excel1 <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment"># 获取excel的sheet表</span>sheet1 <span class="token operator">=</span> excel1<span class="token punctuation">.</span>sheet_by_name<span class="token punctuation">(</span>sheet_name<span class="token punctuation">)</span><span class="token comment"># rows &amp; cols</span>rows <span class="token operator">=</span> sheet1<span class="token punctuation">.</span>nrowscols <span class="token operator">=</span> sheet1<span class="token punctuation">.</span>ncols<span class="token comment"># 第i行、列的数据</span>row_i <span class="token operator">=</span> sheet1<span class="token punctuation">.</span>row_values<span class="token punctuation">(</span>i<span class="token punctuation">)</span>col_i <span class="token operator">=</span> sheet1<span class="token punctuation">.</span>col_values<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment"># 查看所有的sheet表</span>sheet_names <span class="token operator">=</span> excel1<span class="token punctuation">.</span>sheet_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># copy excel1 </span>excel2 <span class="token operator">=</span> copy<span class="token punctuation">(</span>excel1<span class="token punctuation">)</span><span class="token comment"># 新建表</span>excel3 <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># 创建sheet</span>sheet_name <span class="token operator">=</span> excel2<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment">#获取该sheet的最后一行</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sheet_name<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token comment"># 写入excel ,row col value</span>sheet_name<span class="token punctuation">.</span>write<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token comment">#在原有sheet后新增数据</span>sheet_name<span class="token punctuation">.</span>write<span class="token punctuation">(</span>n<span class="token punctuation">,</span>col<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token comment"># 保存 生成excel表</span>excel2<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPath表达式基础</title>
      <link href="2020/02/19/XPath%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
      <url>2020/02/19/XPath%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>除了正则表达式之外，还有一些非常好用的信息筛选工具，比如XPath表达式、BeautifulSoup等</p><ul><li>/ 逐层提取</li><li>text()提取标签下面的文本</li><li>//标签名**</li><li>//标签名[@属性=’属性值’]提取属性为XX的标签</li><li>@属性名 代表取某个属性值<span id="more"></span></li></ul><hr><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>bbbvb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//qd.alibaba.com/go/pcdetail<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>安全推荐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//qd.alibaba.com/go/pcdetail<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>安全推荐2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>J AsyncDC<span class="token punctuation">"</span></span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>official-remind<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            明月几时有        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th align="center">XPath表达式</th><th align="center">提取内容</th></tr></thead><tbody><tr><td align="center">/html/head/title/text()</td><td align="center">主页</td></tr><tr><td align="center">//p/text()</td><td align="center">[‘abc’,’bbbvb’]</td></tr><tr><td align="center">//a</td><td align="center">提取所有的a标签</td></tr><tr><td align="center">//div[@id=’official-remind’]/text()</td><td align="center">明月几时有</td></tr><tr><td align="center">//a/@href</td><td align="center">//qd.alibaba.com/go/pcdetail</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式基础</title>
      <link href="2020/02/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
      <url>2020/02/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础1"><a href="#基础1" class="headerlink" title="基础1"></a>基础1</h2><ul><li>全局匹配函数使用格式 </li></ul><p>re.compile(正则表达式).findall(源字符串)</p><span id="more"></span><table><thead><tr><th align="center">普通字符</th><th align="center">正常匹配</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">匹配换行符</td></tr><tr><td align="center">\t</td><td align="center">匹配制表符</td></tr><tr><td align="center">\w</td><td align="center">匹配字母、数字、下划线</td></tr><tr><td align="center">\W</td><td align="center">匹配除字母、数字、下划线</td></tr><tr><td align="center">\d</td><td align="center">匹配十进制数字</td></tr><tr><td align="center">\D</td><td align="center">匹配除十进制数字</td></tr><tr><td align="center">\s</td><td align="center">匹配空白字符</td></tr><tr><td align="center">\S</td><td align="center">匹配除空白字符</td></tr><tr><td align="center">[ab89x]</td><td align="center">原子表，匹配ab89x中的任意一个</td></tr><tr><td align="center">[^ab89x^]</td><td align="center">原子表，匹配除ab89x以外的任意一个字符</td></tr></tbody></table><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><table><thead><tr><th align="center">源字符串</th><th align="center">正则表达式</th><th align="center">匹配结果</th></tr></thead><tbody><tr><td align="center">“aliyunedu”</td><td align="center">“yu”</td><td align="center">yu</td></tr><tr><td align="center">“‘aliyun\nedu’”</td><td align="center">“yun\n”</td><td align="center">yun\n</td></tr><tr><td align="center">“aliyu89787nedu”</td><td align="center">“\w\d\w\d\d\w”</td><td align="center">u89787</td></tr><tr><td align="center">“aliyu89787nedu”</td><td align="center">“\w\d[nedu]\w”</td><td align="center">87ne</td></tr></tbody></table><hr><h2 id="基础2"><a href="#基础2" class="headerlink" title="基础2"></a>基础2</h2><table><thead><tr><th align="center">正则表达式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">匹配除换行外任意一个字符</td></tr><tr><td align="center">^</td><td align="center">匹配开始位置</td></tr><tr><td align="center">$</td><td align="center">匹配结束位置</td></tr></tbody></table><ul><li>| 前一个字符出现0\1\多次<br>? | 前一个字符出现0\1次</li></ul><ul><li>| 前一个字符出现1\多次<br>{n} |  前一个字符恰好出现n次<br>{n,} | 前一个字符至少n次<br>{n,m} | 前一个字符至少n次，至多m次<br>| | 模式选择符或<br>() | 模式单元，通俗来说就是，想提取出什么内容，就在正则中用小括号将其括起来</li></ul><p>tips:默认贪婪，即默认尽可能多的进行匹配</p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><p>源字符串 : “aliyunnnnji87362387aoyubaidu”</p><table><thead><tr><th align="center">正则表达式</th><th align="center">匹配结果</th></tr></thead><tbody><tr><td align="center">“ali…”</td><td align="center">aliyun</td></tr><tr><td align="center">“^li…”</td><td align="center">None</td></tr><tr><td align="center">“bai..$”</td><td align="center">baidu</td></tr><tr><td align="center">“ali.*”</td><td align="center">aliyunnnnji87362387aoyubaidu</td></tr><tr><td align="center">“aliyun+”</td><td align="center">aliyunnnnn</td></tr><tr><td align="center">“aliyun?”</td><td align="center">aliyun</td></tr><tr><td align="center">“yun{1,2}”</td><td align="center">yunn</td></tr><tr><td align="center">^al(i..)”</td><td align="center">iyu</td></tr></tbody></table><hr><h2 id="基础3"><a href="#基础3" class="headerlink" title="基础3"></a>基础3</h2><p>贪婪模式： 尽可能多的匹配</p><p>懒惰模式： 尽可能少的匹配，精准模式</p><p>默认贪婪模式</p><p>如果出现如下组合，则代表为懒惰模式：</p><p>*?</p><p>+?</p><h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><p>源字符串：”poytphonyhjskjsa”</p><table><thead><tr><th align="center">正则表达式</th><th align="center">匹配结果</th></tr></thead><tbody><tr><td align="center">“p.*y”</td><td align="center">poytphony</td></tr><tr><td align="center">“p.*?y”</td><td align="center">[‘poy’,’phony’]</td></tr></tbody></table><p>第一个贪婪模式</p><p>第二个懒惰模式，精准匹配</p><hr><h2 id="基础4"><a href="#基础4" class="headerlink" title="基础4"></a>基础4</h2><p>模式修正符：在不改变正则表达式的情况下通过模式修正符使匹配结果发生更改</p><p>re.S 让.也可以匹配多行</p><p>re.I 让匹配时忽略大小写</p><h2 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h2><p>string = “””我是阿里云大学\n欢迎来学习\nPython网络爬虫课程”””</p><p>pat=”阿里.*?Python”</p><table><thead><tr><th align="center">源字符串</th><th align="center">正则表达式</th><th align="center">匹配方式</th><th align="center">匹配结果</th></tr></thead><tbody><tr><td align="center">“Python”</td><td align="center">“pyt”</td><td align="center">re.compile(“pyt”).findal(“Python”)</td><td align="center">[]</td></tr><tr><td align="center">“Python”</td><td align="center">“pyt”</td><td align="center">re.compile(“pyt”,re.I).findall(“Python”)</td><td align="center">Pyt</td></tr><tr><td align="center">“Python”</td><td align="center">“pyt”</td><td align="center">re.compile(“pyt”.re.I).findall(“Python”)</td><td align="center">Pyt</td></tr><tr><td align="center">string</td><td align="center">pat</td><td align="center">re.compile(pat).findall(string)</td><td align="center">[]</td></tr><tr><td align="center">string</td><td align="center">pat</td><td align="center">re.compile(pat,re.S).findall(string)</td><td align="center">[‘阿里云大学\n欢迎来学习\nPython’]</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-Spawn-failed-fatal</title>
      <link href="2020/02/13/hexo-Spawn-failed-fatal/"/>
      <url>2020/02/13/hexo-Spawn-failed-fatal/</url>
      
        <content type="html"><![CDATA[<p>今天偶尔发现博客部署到阿里云上没有成功</p><span id="more"></span><p>错误代码：</p><pre class="language-bash" data-language="bash"><code class="language-bash">fatal: LF would be replaced by CRLF <span class="token keyword">in</span> <span class="token number">2019</span>/06/21/hello-world/index.htmlFATAL Something's wrong. Maybe you can <span class="token function">find</span> the solution here: https://hexo.io/docs/troubleshooting.htmlError: Spawn failedat ChildProcess.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span>D:<span class="token punctuation">\</span><span class="token punctuation">\</span>Hexo<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>hexo-util<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>spawn.js:52:19<span class="token punctuation">)</span>at emitTwo <span class="token punctuation">(</span>events.js:106:13<span class="token punctuation">)</span>at ChildProcess.emit <span class="token punctuation">(</span>events.js:191:7<span class="token punctuation">)</span>at ChildProcess.cp.emit <span class="token punctuation">(</span>D:<span class="token punctuation">\</span>blog<span class="token punctuation">\</span>Hexo<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>cross-spawn<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>enoent.js:40:29<span class="token punctuation">)</span>at Process.ChildProcess._handle.onexit <span class="token punctuation">(</span>internal/child_process.js:215:12<span class="token punctuation">)</span></code></pre><p>解决办法：<br>在.git的配置文件里添加</p><pre class="language-bash" data-language="bash"><code class="language-bash">autocrlf <span class="token operator">=</span> <span class="token boolean">false</span>safecrlf <span class="token operator">=</span> <span class="token boolean">false</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="2020/02/06/maven/"/>
      <url>2020/02/06/maven/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在C:\Users\WHH.m2下新建 settings.xml</p><span id="more"></span></li><li><p>将以下内容加入</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0    https://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre></li><li><p>重启IDEA</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-to-your-server</title>
      <link href="2020/01/20/hexo-to-your-server/"/>
      <url>2020/01/20/hexo-to-your-server/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><hr><p><strong>搭建远程git私库</strong></p><ul><li>登录远程服务器，安装git</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version <span class="token comment">#查看是否安装</span></code></pre><ul><li> 创建用户并配置仓库<span id="more"></span><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token function">git</span> <span class="token comment">#创建用户</span><span class="token function">passwd</span> <span class="token function">git</span> <span class="token comment">#设置密码</span><span class="token function">mkdir</span> /home/git <span class="token comment">#创建git文件夹</span><span class="token function">chown</span> -R git:git /home/git<span class="token function">su</span> <span class="token function">git</span> <span class="token comment">#授权</span><span class="token builtin class-name">cd</span> /home/git/<span class="token function">mkdir</span> -p projects/blog <span class="token comment">#项目存在的真实目录</span><span class="token function">mkdir</span> repos <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> repos<span class="token function">git</span> init --bare blog.git <span class="token comment">#创建一个裸露的仓库</span><span class="token builtin class-name">cd</span> blog.git/hooks<span class="token function">vim</span> post-receive <span class="token comment">#创建hook钩子函数,输入</span></code></pre></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/git/projects/blog --git-dir<span class="token operator">=</span>/home/git/repos/blog.git checkout -f</code></pre><p>添加完成后修改权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x post-receive<span class="token builtin class-name">exit</span> //退出到root登录<span class="token function">chown</span> -R git:git /home/git/repos/blog.git <span class="token comment">#添加权限</span></code></pre><ul><li>测试git仓库是否可用</li></ul><p>在本地电脑的git中输入</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@server_ip:/home/git/repos/blog.git</code></pre><p>如果能把空仓库拉下来，则说明git仓库搭建成功</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE0LzE2ZDJiNmVhNGRmNTQxNzg?x-oss-process=image/format,png" alt="pic" loading="lazy"></p><ul><li>建立ssh信任关系，在本地电脑</li></ul><p>如果没有rsa密钥则生成</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email youremail@example.comssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span><span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span>  <span class="token comment"># 禁用自动转换，这个不设置后面上传时会出现警告，如下</span></code></pre><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS85LzE0LzE2ZDJiNmU1MWU4MGFjMTU?x-oss-process=image/format,png" alt="pic" loading="lazy"></p><p>建立ssh信任关系</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-copy-id -i C:/Users/yourname/.ssh/id_rsa.pub git@server_ip<span class="token function">ssh</span> git@server_ip <span class="token comment">#测试能否登录</span></code></pre><p>注意：此时ssh登录git用户不需要密码!如果需要则没配置好</p><ul><li>禁用git 用户的shell登录权限，从而只能用git clone,git push等功能</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells <span class="token comment">#查看git-shell 是否在登录方式里</span><span class="token function">which</span> git-shell <span class="token comment">#查看是否安装</span><span class="token function">vi</span> /etc/shells</code></pre><p>添加第二步显示的路径，通常为 /usr/bin/git-shell</p><ul><li>修改/etc/passwd中的权限</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将原来的 </span>git:x:1000:1000::/home/git:/bin/bash<span class="token comment">#修改为</span>git:x:100:1000:,,,:/home/git:/usr/bin/git-shell</code></pre><hr><p><strong>nginx安装</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> nginx</code></pre><p><strong>验证安装</strong></p><pre class="language-python" data-language="python"><code class="language-python">nginx <span class="token comment"># 启动nginx </span></code></pre><p>查看是否安装成功，在浏览器输入公网ip</p><p><strong>修改配置文件</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找nginx安装路径</span><span class="token function">whereis</span> nginx <span class="token builtin class-name">cd</span> /etc/nginx<span class="token function">vim</span> nginx.conf</code></pre><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/nginx_blog.png?raw=true" alt="code" loading="lazy"></p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/nginx_blog2.png?raw=true" alt="code" loading="lazy"></p><hr><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p><strong>配置_config.yml文件</strong></p><p>1.编辑_config.yml的deploy属性</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/deploy.png?raw=true" alt="code" loading="lazy"></p><p>2.在package.json中添加npm脚本</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"deploy"</span><span class="token operator">:</span><span class="token string">"hexo clean &amp;&amp; hexo g -d"</span><span class="token punctuation">,</span><span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>3.使用<a href="https://whh.plus/2020/01/12/hello-world/">ProtableHexo</a>自带的脚本上传</p>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> server </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter Notebook</title>
      <link href="2020/01/19/Notebook/"/>
      <url>2020/01/19/Notebook/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Jupyter-Notebook"><a href="#什么是Jupyter-Notebook" class="headerlink" title="什么是Jupyter Notebook?"></a>什么是Jupyter Notebook?</h2><p>Jupyter Notebook是一款开放源代码的web应用程序，可以让我们创建并共享代码和文档。</p><p>它提供了一个环境，你可以在其中记录代码，运行代码，查看结果，可视化数据并在查看输出结果。这些特性使其成为一款执行端到端数据科学工作流程的便捷工具 ，可以用于数据清理，统计建模，构建和训练机器学习模型，可视化数据以及许多其他用途。</p><span id="more"></span><h2 id="ubuntu安装Jupyter-Notebook"><a href="#ubuntu安装Jupyter-Notebook" class="headerlink" title="ubuntu安装Jupyter Notebook"></a>ubuntu安装Jupyter Notebook</h2><ul><li>安装Anaconda</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> anaconda <span class="token comment">#创建文件夹</span><span class="token builtin class-name">cd</span> anaconda <span class="token comment">#进入文件夹</span><span class="token function">wget</span> https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh <span class="token comment">#从指定地址下载文件</span><span class="token function">bash</span> Anaconda3-4.4.0-Linux-x86_64.sh <span class="token comment">#安装文件</span></code></pre><p>检查是否安装成功</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda --version</code></pre><p>如果出现conda: command not found</p><p>添加环境变量：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc</code></pre><p>在最后加上：anaconda3的路径</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/your/path/to/anaconda3/bin</code></pre><p>保存更改，运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc</code></pre><p>检查是否安装成功</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda --version</code></pre><p>conda创建python虚拟环境</p><pre class="language-bash" data-language="bash"><code class="language-bash">conda create -n your_env_name<span class="token builtin class-name">source</span> activate your_env_name <span class="token comment">#进入虚拟环境</span>python --version <span class="token comment">#更换到python3</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">alias</span> <span class="token assign-left variable">python</span><span class="token operator">=</span>python3 <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrcpython --version</code></pre><p>如果anaconda版本不够，可手动更新升级 (具体可百度)</p><ul><li>通过anaconda安装jupyter及各种包</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> jupyterconda update --all <span class="token comment">#升级所有包</span></code></pre><ul><li>  配置远程访问登录密码</li></ul><p>1、在终端输入</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost<span class="token punctuation">]</span>:~<span class="token comment">#ipython</span>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: from notebook.auth <span class="token function">import</span> <span class="token function">passwd</span> In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: passwd<span class="token punctuation">(</span><span class="token punctuation">)</span>Enter password:Verify password:Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: <span class="token string">'sha1:xxxxx'</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: <span class="token builtin class-name">exit</span></code></pre><p>解释：这是在python中调用passwd()方法，输入密码输出hashcode编码</p><p>2、保存刚刚的hashcode</p><pre class="language-bash" data-language="bash"><code class="language-bash">jupyter notebook --generate-config --allow-root <span class="token comment">#生成配置文件</span><span class="token function">vim</span> ~/.jupyter/jupyter_notebook_config.py <span class="token comment">#打开配置文件```</span></code></pre><p>如果没使用过vim的，可以学一下。</p><p>在配置文件中,加入:</p><pre class="language-bash" data-language="bash"><code class="language-bash">c.NotebookApp.ip<span class="token operator">=</span><span class="token string">'*'</span>     <span class="token comment"># * 代表所有iP都能访问 ，也可以指定ip</span>c.NotebookApp.password <span class="token operator">=</span> u<span class="token string">'sha1:xxxxx'</span>  <span class="token comment"># 刚才复制的那个密文</span>c.NotebookApp.open_browser <span class="token operator">=</span> False  <span class="token comment"># 禁止自动打开浏览器</span>c.NotebookApp.port <span class="token operator">=</span><span class="token number">8888</span>    <span class="token comment">#指定一个端口</span>c.NotebookApp.notebook_dir <span class="token operator">=</span> <span class="token string">'PATH'</span>  <span class="token comment">#指定工作空间</span>c.PAMAuthenticator.encoding <span class="token operator">=</span> <span class="token string">'utf8'</span>         <span class="token comment">#指定utf-8编码，解决读取中文路径或者文件乱码问题</span></code></pre><p>如果需要取消jupyter notebook登录密码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将c.NotebookApp.password=u'sha1:xxx'注释掉</span><span class="token comment"># c.NotebookApp.password=u'sha1:xxx'</span>c.NotebookApp.token<span class="token operator">=</span><span class="token string">''</span></code></pre><p>:wq保存</p><p>【注意】：到目前为止jupyter就已经在服务器中安装配置好了，但是8888端口默认是关闭的，如果是阿里云服务器，需要在阿里云控制台开放</p><p>8888端口</p><ul><li>最后输入 </li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">ufw disable</code></pre><p>关闭防火墙</p><pre class="language-bash" data-language="bash"><code class="language-bash">jupyter notebook --ip<span class="token operator">=</span><span class="token number">0.0</span>.0.0 --allow-root <span class="token comment">#在服务器运行jupyter notebook</span></code></pre><ul><li><p>浏览器输入<a href="http://xxx:8888/">http://xxx:8888</a> 即可登录</p></li><li><p>后台运行</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> jupyter notebook --ip<span class="token operator">=</span><span class="token number">0.0</span>.0.0 --allow-root <span class="token operator">></span> /home/whh/notebook/jupyter.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span></code></pre><p>&amp;让命令后台运行，并输出到log中</p><p>nohup 表示 no hang up ，不挂起</p><ul><li>终止进程</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> jupyter <span class="token comment">#查看运行的jupyter进程</span><span class="token function">kill</span> -9 pid</code></pre>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习过程</title>
      <link href="2020/01/19/git/"/>
      <url>2020/01/19/git/</url>
      
        <content type="html"><![CDATA[<p>学习git的记录</p><span id="more"></span><h2 id="合并到master分支"><a href="#合并到master分支" class="headerlink" title="合并到master分支"></a>合并到master分支</h2><pre class="language-bash" data-language="bash"><code class="language-bash">m commits behind master , n commits ahead m <span class="token operator">|</span> n</code></pre><h4 id="先变成-m-1"><a href="#先变成-m-1" class="headerlink" title="先变成 m | 1"></a>先变成 m | 1</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull<span class="token function">git</span> reset --soft HEAD~n<span class="token function">git</span> status<span class="token function">git</span> commit -m <span class="token string">""</span><span class="token function">git</span> push -f</code></pre><p>#####再将m | 1 变为 0 | 1</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> pull origin master<span class="token function">git</span> checkout wh<span class="token function">git</span> rebase master<span class="token function">git</span> push -f</code></pre><p>git 回退打破上一次分支合并的merge</p><p>1.找到上一次提交到master分支的版本号</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline</code></pre><p>2.回退到指定版本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard <span class="token punctuation">[</span>merge前的版本号<span class="token punctuation">]</span></code></pre><p>merge过程</p><p>当git pull时出现冲突问题时，如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">warning: Cannot merge binary files: regionminute10_15.xlsx <span class="token punctuation">(</span>HEAD vs. 03930ecfcd8a9c20eebe2d7dcd62e830455f1642<span class="token punctuation">)</span>warning: Cannot merge binary files: data3.xlsx <span class="token punctuation">(</span>HEAD vs. 03930ecfcd8a9c20eebe2d7dcd62e830455f1642<span class="token punctuation">)</span>Auto-merging users3_15.pyAuto-merging regionminute10_15.xlsxCONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> regionminute10_15.xlsxAuto-merging data3.xlsxCONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> data3.xlsxAutomatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.</code></pre><p>右下角则会出现 merging 状态，此时pull push等都不能用，只能见解决冲突或者取消merge</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge --abort <span class="token comment">#取消merge</span></code></pre><p>解决冲突过程</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/merge.png?raw=true" alt="merge" loading="lazy"></p><p>选择Resolve Conflicts</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/resolve.png?raw=true" alt="resolve" loading="lazy"></p><p>如图可以发现冲突的文件，如果你的版本低于服务器的版本直接Accept Theirs,如果你的是最新的版本直接accept yours，如果不确定的话点击merge，逐行代码进行更新替换。</p><p>最后结束merge</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge --continue</code></pre><h2 id="git提交每次都要输入用户名和密码"><a href="#git提交每次都要输入用户名和密码" class="headerlink" title="git提交每次都要输入用户名和密码"></a>git提交每次都要输入用户名和密码</h2><p>问题:使用git提交到github,每次都要输入用户名和密码，操作起来很麻烦。</p><p>原因:在clone项目或上传项目的时候，使用的是https方式，而不是ssh方式，切换一下即可。</p><p><img src="https://github.com/wentianhao/wentianhao.github.io/blob/master/images/git.png?raw=true" alt="git" loading="lazy"></p><p>选择ssh方式，复制url</p><p>解决办法：</p><p>1.查看是https方式还是ssh方式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v   </code></pre><p>2.移除https的方式，换成ssh方式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rm</span> origin</code></pre><p>3.添加新的git方式：ssh方式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:xxxxxx.git</code></pre><p>4.查看push方式是否修改成功</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v</code></pre><p>5.push测试是否需要用户名和密码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master</code></pre><h2 id="github删除一个commit-回滚到某个commit-的方法"><a href="#github删除一个commit-回滚到某个commit-的方法" class="headerlink" title="github删除一个commit(回滚到某个commit)的方法"></a>github删除一个commit(回滚到某个commit)的方法</h2><ul><li>获取提交的历史</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log</code></pre><p>找到提交的commit_id</p><ul><li>回滚</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard commit_id</code></pre><ul><li>提交,回滚至之前的代码</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin HEAD --force</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud mybaits 微服务增删改查(一)</title>
      <link href="2020/01/13/springcloud1/"/>
      <url>2020/01/13/springcloud1/</url>
      
        <content type="html"><![CDATA[<p>IDE：IDEA 2017.03</p><p><strong>1.构建spring cloud聚合项目</strong></p><p>1)新建maven项目</p><p>不需要使用模板，直接next，填写项目名称继续next,最后finish</p><span id="more"></span><p><img src="https://img-blog.csdnimg.cn/20190925111020451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>2）构建子模块</p><p>删除掉父模块中的src文件夹，新建子模块，最后层次结构如下：</p><p><img src="https://img-blog.csdnimg.cn/20190925111706101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>在项目工程上右键new-&gt;Module，一直next就行，注意一下继承的父模块。</p><p><img src="https://img-blog.csdnimg.cn/20190925112426157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>其他模块也是如此新建。</p><p>父模块的pom.xml：</p><p><img src="https://img-blog.csdnimg.cn/20190925112659123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>子模块的pom.xml:</p><p><img src="https://img-blog.csdnimg.cn/20190925112727798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><strong>2.配置注册中心</strong></p><ul><li>配置spring boot spring cloud等依赖。公共依赖可放在父模块,子模块可以调用父模块的pom.xml</li></ul><pre class="language-yml" data-language="yml"><code class="language-yml">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;        xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;        xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion        &lt;groupId&gt;com.springcloud.demo&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;    &lt;!--子模块设置--&gt;    &lt;modules&gt;        &lt;module&gt;mybatisregister&lt;&#x2F;module&gt;        &lt;module&gt;mybatisproduce&lt;&#x2F;module&gt;        &lt;module&gt;mybatisconsumer&lt;&#x2F;module&gt;    &lt;&#x2F;modules&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;        &lt;version&gt;2.1.2.RELEASE&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;    &lt;&#x2F;parent&gt;    &lt;properties&gt;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;!--eureka server --&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;!-- spring boot test--&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;            &lt;version&gt;2.1.3.RELEASE&lt;&#x2F;version&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;dependencyManagement&gt;        &lt;dependencies&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;                &lt;version&gt;Finchley.M7&lt;&#x2F;version&gt;                &lt;type&gt;pom&lt;&#x2F;type&gt;                &lt;scope&gt;import&lt;&#x2F;scope&gt;            &lt;&#x2F;dependency&gt;        &lt;&#x2F;dependencies&gt;    &lt;&#x2F;dependencyManagement&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;            &lt;&#x2F;plugin&gt;        &lt;&#x2F;plugins&gt;    &lt;&#x2F;build&gt;    &lt;repositories&gt;        &lt;repository&gt;            &lt;id&gt;spring-milestones&lt;&#x2F;id&gt;            &lt;name&gt;Spring Milestones&lt;&#x2F;name&gt;            &lt;url&gt;https:&#x2F;&#x2F;repo.spring.io&#x2F;milestone&lt;&#x2F;url&gt;            &lt;snapshots&gt;                &lt;enabled&gt;false&lt;&#x2F;enabled&gt;            &lt;&#x2F;snapshots&gt;        &lt;&#x2F;repository&gt;    &lt;&#x2F;repositories&gt;&lt;&#x2F;project&gt;</code></pre><ul><li>手动新建application.yml（文件名不可随意更改）</li></ul><p><img src="https://img-blog.csdnimg.cn/20190925113449653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-yml" data-language="yml"><code class="language-yml"># 端口号server:port: 8088#eureka配置eureka:instance:#注册中心ip地址    hostname: localhostclient:    #是否注册到eureka    register-with-eureka: false    #是否检测服务信息    fetch-registry: false    #注册地址    service-url:    defaultZone: http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;</code></pre><ul><li>新建运行类application</li></ul><p>@EnableEurekaServer 注解，声明这是一个Eureka Server</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>register</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaServer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> mybatisRegister_Application <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>mybatisRegister_Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>3.配置服务提供者</strong></p><p>在另一个子模块中进行配置</p><ul><li>添加application.yml和application</li></ul><p><img src="https://img-blog.csdnimg.cn/20190925114804773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-yml" data-language="yml"><code class="language-yml">eureka:client:#注意！这里注册中心地址，要把服务注册到注册中心    service-url:    defaultZone: http:&#x2F;&#x2F;localhost:8088&#x2F;eureka&#x2F;#服务端口号server:port: 8089spring:#本服务的注册到注册中心的别名application:    name: service-memberjpa:    generate-ddl: false    show-sql: true    hibernate:    ddl-auto: nonedatasource:    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;ssmdemo?serverTimezone&#x3D;UTC    username: root    password: 123456    driver-class-name: com.mysql.cj.jdbc.Drivermybatis:mapper-locations: classpath*:mappers&#x2F;*.xml</code></pre><p>这里使用的注解是@EnableEurekaClient</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">EnableAutoConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaClient</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.springcloud.produce.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> mybatisProduce_Application <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>mybatisProduce_Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>构建测试controller</p><p><img src="https://img-blog.csdnimg.cn/20190925115250599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> testController <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello eureka"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行注册模块和生产微服务模块 </p><p><img src="https://img-blog.csdnimg.cn/20190925115709117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190925115814903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><strong>4.配置服务消费者</strong></p><p><img src="https://img-blog.csdnimg.cn/20190925145616621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>application.yml:</p><pre class="language-yml" data-language="yml"><code class="language-yml">eureka:client:#注意！ 这里注册中心地址，要把服务注册到注册中心    service-url:    defaultZone: http:&#x2F;&#x2F;localhost:8088&#x2F;eureka&#x2F;server:#服务端口号port: 8087spring:#本服务注册到注册中心的别名application:    name: service-order</code></pre><p>application.class</p><p>这里需要将RestTemplate注入到springboot中，然后开启负载均衡</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">LoadBalanced</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">EnableFeignClients</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.springcloud.consumer.util"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> mybatisConsumer_Application <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>mybatisConsumer_Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**    * @Bean，是注入springboot    * @LoadBalanced，开启负载均衡，开启后，restTemplate.getForObject()里的是serviceId(service-member)    * @LoadBalanced,不开启时，restTemplate.getForObject()里面的时ip地址（127.0.0.1）    */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>方法一：通过spring 提供的用于访问Rest服务的客户端</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">MemberApiFeign</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> orderController <span class="token punctuation">&#123;</span><span class="token comment">// 自动注入RestTemplate类</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MemberApiFeign</span> memberApiFeign<span class="token punctuation">;</span>    <span class="token comment">//第一种方法通过Spring提供的用于访问Rest服务的客户端</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getOrder"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//这里放的url，使用的是服务提供者的别名+方法名</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://service-member:8089/test"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//第二种方法通过feign声明web服务客户端调用</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getFeignOrder"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFeignOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">memberApiFeign<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190925144945696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><ul><li>方法二：通过feign声明web服务客户端调用原理</li></ul><p>创建调用接口 FeignUtil.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service-member"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FeignUtil</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">User</span> <span class="token function">queryUserAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">User</span> <span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deteleUser/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>controller层调用↑↑↑代码里已贴。运行结果一样。</p><p><a href="https://blog.csdn.net/www_indows/article/details/101368222">下一篇实现mybatis的增删改查并注册到注册中心中，供消费者调用</a>。</p><p><a href="https://download.csdn.net/download/www_indows/11818391">源码</a></p>]]></content>
      
      
      <categories>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud mybaits 微服务增删改查(二)</title>
      <link href="2020/01/13/springcloud2/"/>
      <url>2020/01/13/springcloud2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/www_indows/article/details/101204585">在上一篇的基础上增加增删改查功能</a></p><p><strong>创建数据库：</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> ssmdemo<span class="token punctuation">;</span></code></pre><span id="more"></span><p><strong>创建表：</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> tb_user<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb_user <span class="token punctuation">(</span>id <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>user_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>name1 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>sex <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>birthday <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>created <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>updated <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p><strong>插入数据</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> ssmdemo<span class="token punctuation">.</span>tb_user <span class="token punctuation">(</span> user_name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name1<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> created<span class="token punctuation">,</span> updated<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> ‘www’<span class="token punctuation">,</span> ‘<span class="token number">123456</span>’<span class="token punctuation">,</span> ‘我’<span class="token punctuation">,</span> ‘<span class="token number">22</span>’<span class="token punctuation">,</span> ‘<span class="token number">1</span>’<span class="token punctuation">,</span> ‘<span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">25</span>’<span class="token punctuation">,</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> ssmdemo<span class="token punctuation">.</span>tb_user <span class="token punctuation">(</span> user_name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name1<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> created<span class="token punctuation">,</span> updated<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> ‘ss’<span class="token punctuation">,</span> ‘<span class="token number">123456</span>’<span class="token punctuation">,</span> ‘哇’<span class="token punctuation">,</span> ‘<span class="token number">22</span>’<span class="token punctuation">,</span> ‘<span class="token number">1</span>’<span class="token punctuation">,</span> ‘<span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">25</span>’<span class="token punctuation">,</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sysdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>模块结构：</p><p><img src="https://img-blog.csdnimg.cn/20190925155145677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><strong>entity层：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user_name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> created<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> updated<span class="token punctuation">;</span>    <span class="token comment">/*setter and getter */</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p><strong>mybatis</strong></p><p>引入依赖</p><pre class="language-yml" data-language="yml"><code class="language-yml">&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;    &lt;version&gt;3.2.8&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><p><strong>mybatis配置：</strong></p><p>1.全局配置：mybatis-config.xml</p><p>2.映射文件:  UserMapper.xml</p><p><strong>mybatis-config.xml:</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>    <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>    <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 根标签 --></span><span class="token comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 环境，可以配置多个，default：指定采用哪个环境 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- id：唯一标识 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 事务管理器，JDBC类型的事务管理器 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token comment">&lt;!-- 数据源，池类型的数据源 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/ssmdemo?serverTimezone=UTC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mappers/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p><strong>UserMapper.xml</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>    <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--mappers：根标签，namespace：命名空间，随便写，在同一个命名空间下保持唯一--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springcloud.produce.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--resultType:sql语句查询结果集的封装类型，tb_user即为数据库中的表--></span><span class="token comment">&lt;!--resultMap标签，是为了映射select查询出来结果的集合，主要作用是将实体类中的字段和数据库表中的字段进行关联映射--></span><span class="token comment">&lt;!--当实体类中的字段与数据库表中的字段相同时，可以将resultMap标签中的关联关系忽略不写--></span>    <span class="token comment">&lt;!--使用别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springcloud.mybatis.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT        tuser.id as id,        tuser.user_name as user_name,        tuser.password as password,        tuser.name1 as name1,        tuser.birthday as birthday,        tuser.sex as sex,        tuser.created as created,        tuser.updated as updated        from        tb_user tuser        where tuser.id = #&#123;id&#125;;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryUserAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springcloud.mybatis.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from tb_user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--插入数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springcloud.mybatis.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO tb_user (        id,        user_name,        password,        name1,        age,        sex,        birthday,        created,        updated        )        VALUES        (        #&#123;id&#125;,        #&#123;user_name&#125;,        #&#123;password&#125;,        #&#123;name1&#125;,        #&#123;age&#125;,        #&#123;sex&#125;,        #&#123;birthday&#125;,        now(),        now()        );    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.springcloud.mybatis.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        UPDATE tb_user        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>user_name = #&#123;user_name&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>password = #&#123;password&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name1!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>name = #&#123;name1&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>age = #&#123;age&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>sex = #&#123;sex&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>birthday = #&#123;birthday&#125;,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            updated = now(),        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span>        WHERE        (id = #&#123;id&#125;);    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from tb_user where id=#&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p><strong>Mapper层UserMapper.java</strong></p><p>需要与UserMapper.xml中的id对应!!</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span><span class="token comment">//根据id查询用户信息</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_user where id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查询所有用户信息</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">User</span> <span class="token function">queryUserAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//新增用户</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into tb_user(id,user_name, password,name1, age, sex, birthday, created, updated) values(#&#123;id&#125;,#&#123;user_name&#125;, #&#123;password&#125;,#&#123;name1&#125;, #&#123;age&#125;, #&#123;sex&#125;, #&#123;birthday&#125;, #&#123;created&#125;, #&#123;updated&#125;)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//更新用户信息</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update tb_user set user_name = #&#123;user_name&#125;,updated = #&#123;updated&#125; where id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from tb_user where id = #&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token comment">//根据id删除用户信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>service层：</strong></p><p><strong>UserService:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">User</span> <span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>UserMapperImpl:</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">User</span> <span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">User</span> users <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper<span class="token punctuation">.</span><span class="token function">queryUserAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>controller层：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>produce<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> userController <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>    <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这个很重要！！！构建sqlSessionFactory</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/selectUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">User</span> <span class="token function">lists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">User</span> users <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">getLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName1</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUser_name</span><span class="token punctuation">(</span><span class="token string">"wwww"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deteleUser/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">queryUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUser_name</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>最后运行项目测试一下，我 就不贴图了，测试过很多次了，如果有什么问题，欢迎留言~~</p><p>在消费模块中调用增删改查功能之后再写博客辣~~</p><p><a href="https://download.csdn.net/download/www_indows/11818391">源码</a></p><p>下一篇打算总结一下mybatis的具体用法，总感觉自己还是没有弄的很清楚!!!</p>]]></content>
      
      
      <categories>
          
          <category> spring cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring cloud </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gem5与nvmain混合编译（二）———配置和运行ｐａｒｓｅｃ-2.1</title>
      <link href="2020/01/13/parsec/"/>
      <url>2020/01/13/parsec/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a><strong>参考资料：</strong></h2><p><a href="http://www.gem5.org/PARSEC_benchmarks"><strong>官方资料</strong></a>：<a href="http://www.gem5.org/PARSEC_benchmarks">http://www.gem5.org/PARSEC_benchmarks</a><br><a href="http://pfzuo.github.io/2016/06/06/Configure-and-run-parsec-2.1-benchmark-in-GEM5/">http://pfzuo.github.io/2016/06/06/Configure-and-run-parsec-2.1-benchmark-in-GEM5/</a></p><p>配置ＰＡＲＳＥＣ Ｂenchmark (以ＡＲＰＨＡ架构为例)</p><span id="more"></span><ol><li>在gem5目录下新建一个文件夹用来存储ＰＡＲＳＥＣ Ｂenchmark 的disk image</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">mdkir fs_images<span class="token builtin class-name">cd</span> fs_images</code></pre><ol start="2"><li>下载初始的系统文件</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://www.m5sim.org/dist/current/m5_system_2.0b3.tar.bz2<span class="token function">tar</span> jxvf m5_system_2.0b3.tar.bz2<span class="token function">mv</span> m5_system_2.0b3 system</code></pre><p>解压后，文件目录结构：</p><pre class="language-bash" data-language="bash"><code class="language-bash">system/binaries/      console      ts_osfpal      vmlinuxdisks/      linux-bigswap2.img      linux-latest.img</code></pre><ol start="3"><li>下载ＰＡＲＳＥＣ Benchmark相关文件，并替换掉system 文件夹中的对应文件</li></ol><ul><li>下载ＰＡＲＥＳＣ对应的linux kernel文件，替换 <code>system/binaries/vmlinux</code></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./system/binaries/<span class="token function">wget</span> http://www.cs.utexas.edu/~parsec_m5/vmlinux_2.6.27-gcc_4.3.4<span class="token function">rm</span> vmlinux<span class="token function">mv</span> vmlinux_2.6.27-gcc_4.3.4 vmlinux</code></pre><ul><li>下载对应的ＰＡＬ code文件，替换<code>system/binaries/ts_osfpal</code></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://www.cs.utexas.edu/~parsec_m5/tsb_osfpal<span class="token function">rm</span> ts_osfpal<span class="token function">mv</span> tsb_osfpal ts_osfpal</code></pre><ul><li>下载ＰＡＲＳＥＣ-2.1 Ｄisk Image 并解压</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/disks/<span class="token function">wget</span> http://www.cs.utexas.edu/~parsec_m5/linux-parsec-2-1-m5-with-test-inputs.img.bz2<span class="token function">bzip2</span> -b linux-parsec-2-1-m5-with-test-inputs.img.bz2</code></pre><ol start="4"><li>进入gem5文件夹，修改两个文件（SysPaths.py 和 Benckmarks.py）配置parsec的路径和文件名</li></ol><p>打开SysPaths.py配置parsec disk image的完整路径：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ./configs/common/SysPaths.py </code></pre><p>修改前：</p><pre class="language-bash" data-language="bash"><code class="language-bash">path <span class="token operator">=</span> <span class="token punctuation">[</span> ’/dist/m5/system’, ’/n/poolfs/z/dist/m5/system’ <span class="token punctuation">]</span></code></pre><p>修改后：</p><pre class="language-bash" data-language="bash"><code class="language-bash">path <span class="token operator">=</span> <span class="token punctuation">[</span> ’/dist/m5/system’, ’/path/to/gem5/fs_images/system’ <span class="token punctuation">]</span></code></pre><p>打开Benchmarks.py，修改image文件名：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ./configs/common/Benchmarks.py</code></pre><p>修改前：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">elif</span> buildEnv<span class="token punctuation">[</span><span class="token string">'TARGET_ISA'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'alpha'</span><span class="token builtin class-name">:</span><span class="token builtin class-name">return</span> env.get<span class="token punctuation">(</span><span class="token string">'LINUX_IMAGE'</span>, disk<span class="token punctuation">(</span><span class="token string">'linux-latest.img'</span><span class="token punctuation">))</span></code></pre><p>修改后：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">elif</span> buildEnv<span class="token punctuation">[</span><span class="token string">'TARGET_ISA'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'alpha'</span><span class="token builtin class-name">:</span><span class="token builtin class-name">return</span> env.get<span class="token punctuation">(</span><span class="token string">'LINUX_IMAGE'</span>, disk<span class="token punctuation">(</span><span class="token string">'linux-parsec-2-1-m5-with-test-inputs.img'</span><span class="token punctuation">))</span></code></pre><ol start="5"><li>生成benchmark的script文件，用于运行benchmark</li></ol><p>下载PARSEC script生成包，并解压到gem5目录下即可：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://www.cs.utexas.edu/~parsec_m5/TR-09-32-parsec-2.1-alpha-files.tar.gz<span class="token function">tar</span> zxvf TR-09-32-parsec-2.1-alpha-files.tar.gz</code></pre><p>生成script命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">./writescripts.pl <span class="token operator">&lt;</span>benchmark<span class="token operator">></span> <span class="token operator">&lt;</span>nthreads<span class="token operator">></span></code></pre><p>ＰＡＲＳＥＣ 有13 种Ｂenchmark:</p><pre class="language-bash" data-language="bash"><code class="language-bash">blackscholesbodytrackcannealdedupfacesimferretfluidanimatefreqminestreamclusterswaptionsvipsx264rtview</code></pre><p>例如生成x264 script命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> TR-09-32-parsec-2.1-alpha-files/./writescripts.pl x264 <span class="token number">1</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190519103138529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 6. 根据生成的script文件运行gem5 </p><pre class="language-bash" data-language="bash"><code class="language-bash">./build/ALPHA/gem5.opt ./configs/example/fs.py -n <span class="token operator">&lt;</span>number<span class="token operator">></span> --script<span class="token operator">=</span>./path/to/runScript.rcS --caches --l2cache</code></pre><ol start="7"><li>新开一个终端，使用telnet 与gem5模拟系统进行交互</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">telnet localhost <span class="token number">3456</span></code></pre><p>如果使用这种方式连接发生意外中断，推荐使用以下交互方式<br>使用m5term</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> gem5/util/term/<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span class="token function">sudo</span> ./m5term <span class="token number">127.0</span>.0.1 <span class="token number">3456</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190519104051256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> gem5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gem5 </tag>
            
            <tag> nvmain </tag>
            
            <tag> parsec-2.1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gem5的安装与使用</title>
      <link href="2020/01/13/gem5/"/>
      <url>2020/01/13/gem5/</url>
      
        <content type="html"><![CDATA[<h2 id="gem5的安装与使用"><a href="#gem5的安装与使用" class="headerlink" title="gem5的安装与使用"></a>gem5的安装与使用</h2><p><strong>1. 安装各类库文件（ubuntu）</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mercurial scons swig gcc m4 python python-dev libgoogle-perftools-dev g++ libprotobuf-dev</code></pre><p>由于ubuntu缺省情况下，并没有提供C/C++的编译环境，单独安装gcc以及g++比较麻烦，ubuntu提供一个build-essential软件包。安装这个软件包，编译C/C++需要的软件包都会被安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</code></pre><span id="more"></span><p><strong>2.下载gem5源码</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">hg</span> clone http://repo.gem5.org/gem5</code></pre><p><img src="https://img-blog.csdnimg.cn/20190420183524941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="下载gem5" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190420183640443.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>配置hgrc<br>打开hgrc文件：<code>vim gem5/.hg/hgrc</code>,将以下文件内容拷贝到里面，修改username,style等信息，style是你gem5文件里的style.其实我觉得<code>[email] </code>中的内容其实作用不大，但是看了好多其他的都差不多是这样我自己就只修改了style和username。<br>信息的修改只是一种标识，不影响编译和使用，最重要的是<code>[extensions] hgext.mq =</code>   扩充hg命令.</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ui<span class="token punctuation">]</span><span class="token comment"># Set the username you will commit code with</span><span class="token assign-left variable">username</span><span class="token operator">=</span>Your Name <span class="token operator">&lt;</span>your@email.address<span class="token operator">></span><span class="token function">ssh</span> <span class="token operator">=</span> <span class="token function">ssh</span> -C<span class="token comment"># Always use git diffs since they contain permission changes and rename info</span><span class="token punctuation">[</span>defaults<span class="token punctuation">]</span>qrefresh <span class="token operator">=</span> --gitemail <span class="token operator">=</span> --git<span class="token function">diff</span> <span class="token operator">=</span> --git<span class="token punctuation">[</span>extensions<span class="token punctuation">]</span><span class="token comment"># These are various extensions we find useful</span><span class="token comment"># Mercurial Queues -- allows managing of changes as a series of patches</span>hgext.mq <span class="token operator">=</span><span class="token comment"># PatchBomb -- send a series of changesets as e-mailed patches</span>hgext.patchbomb <span class="token operator">=</span><span class="token comment"># External Diff tool (e.g. kdiff3, meld, vimdiff, etc)</span>hgext.extdiff <span class="token operator">=</span><span class="token comment"># Fetch allows for a pull/update operation to be done with one command and automatically commits a merge changeset</span>hgext.fetch <span class="token operator">=</span><span class="token comment"># Path to the style file for the M5 repository</span><span class="token comment"># This file enforces our coding style requirements</span>style <span class="token operator">=</span> /path/to/your/gem5/util/style.py<span class="token punctuation">[</span>email<span class="token punctuation">]</span>method <span class="token operator">=</span> smtpfrom <span class="token operator">=</span> Your Name <span class="token operator">&lt;</span>your@email.address<span class="token operator">></span><span class="token punctuation">[</span>smtp<span class="token punctuation">]</span><span class="token function">host</span> <span class="token operator">=</span> your.smtp.server.here</code></pre><p><strong>3.获取NVMain</strong></p><ul><li>注册bitbucket帐号<br><a href="https://bitbucket.org/account/signup/">https://bitbucket.org/account/signup/</a></li><li>获取NVMain使用权<br>打开<a href="https://bitbucket.org/mrp5060/nvmain/%E5%B9%B6%E7%99%BB%E9%99%86bitbucket%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%99%BB%E9%99%86%E5%90%8E%E9%87%8D%E6%96%B0%E6%89%93%E5%BC%80%E5%89%8D%E9%9D%A2%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E8%8E%B7%E5%8F%96%E4%B8%8B%E8%BD%BD%E5%91%BD%E4%BB%A4">https://bitbucket.org/mrp5060/nvmain/并登陆bitbucket账号，登陆后重新打开前面这个网站获取下载命令</a> </li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://your account@bitbucket.org/xxx</code></pre><ul><li><a href="https://bitbucket.org/mrp5060/nvmain/downloads/">或者点击下载nvmain（无需注册）</a></li><li>nvmain文件位置随意，我放在了gem5根目录下，如果放的位置不同，后面编译时注意相对位置</li></ul><p>4.<strong>安装NVMain补丁</strong></p><ul><li><p>进入gem5根目录</p></li><li><p>初始化补丁目录</p></li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">hg</span> init<span class="token function">hg</span> qinit</code></pre><ul><li>输入补丁 (注意nvmain文件位置，以及补丁的版本号)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">hg</span> qimport -f ./nvmain/patches/gem5/nvmain2-gem5-11688+</code></pre><ol><li>安装补丁</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">hg</span> qpush</code></pre><ol start="2"><li>如果打补丁出错,检查gem5的版本，检查nvmain中补丁的版本</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 版本不对，更新gem5</span><span class="token function">hg</span> update <span class="token number">11688</span><span class="token comment"># 检查补丁是否打上</span><span class="token function">hg</span> qapplied</code></pre><p>5.<strong>联合编译gem5和nvmain</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">scons <span class="token assign-left variable">EXTRAS</span><span class="token operator">=</span>nvmain ./build/X86/gem5.opt </code></pre><p><img src="https://img-blog.csdnimg.cn/20190420184756987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="scons done" loading="lazy"></p><p><strong>在这一步中容易出现各种错误</strong></p><p><strong>1. ImportError: No module named gem5_scons:</strong></p><p><img src="https://img-blog.csdnimg.cn/20190420190508767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>查看gem5目录中是否存在gem5_scons文件夹，如果没有则在site_scons中将gem5_scons移到gem5根目录下</p><p><img src="https://img-blog.csdnimg.cn/20190420190758359.png" alt="在这里插入图片描述" loading="lazy"></p><p><strong>2. [-Werror=implicit-fallthrough=]</strong></p><p>这个问题困扰了我好久，百度了好久终于发现问题</p><p>如果gcc版本号为7，那么源代码的switch-case块中如果忘了加上break，有可能会报错Implicit fallthrough error。</p><p><strong>解决办法：编译时忽略Implicit fallthrough error这个错误</strong></p><p><strong>修改 gem5中的SConstruct</strong></p><p>在<strong>CCFLAGS</strong>中添加 <strong>-Wno-implicit-fallthrough</strong> 即可忽略该错误</p><pre class="language-bash" data-language="bash"><code class="language-bash">main.Append<span class="token punctuation">(</span>CCFLAGS<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'-Wall'</span>, <span class="token string">'-Wundef'</span>, <span class="token string">'-Wextra'</span>,                        <span class="token string">'-Wno-sign-compare'</span>, <span class="token string">'-Wno-unused-parameter'</span>,<span class="token string">'-Wno-implicit-fallthrough'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>3. [-Werror]相关类似错误</strong></p><p>均可按照上面的方法，忽略gcc-7版本的问题导致的错误</p><p>6.<strong>测试</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">./build/X86/gem5.opt ./configs/example/se.py -c ./tests/test-progs/hello/bin/x86/linux/hello</code></pre><p><img src="https://img-blog.csdnimg.cn/20190420194540619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d19pbmRvd3M=,size_16,color_FFFFFF,t_70" alt="hello world" loading="lazy"></p><p>如果遇到和我一样的错误的，希望对你有帮助，么么哒</p>]]></content>
      
      
      <categories>
          
          <category> gem5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gem5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="2020/01/12/hexo/"/>
      <url>2020/01/12/hexo/</url>
      
        <content type="html"><![CDATA[<p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop.png" loading="lazy"></p><blockquote><p><strong>本版本仅适用于Win环境</strong><br>本文关键字： <strong>Hexo绿色版</strong>，<strong>Hexo便携版</strong>，<strong>Hexo配置</strong>，<strong>Hexo</strong>，<strong>U盘</strong></p></blockquote><p><a href="https://hexo.io/">Hexo</a>是一个快速、简洁且高效的博客框架，支持 GitHub Flavored Markdown 的所有功能；具有超快生成速度，让上百个页面在几秒内瞬间完成渲染；还拥有各式各样的插件等等。</p><p>但是就像很多教程里面写的那样，搭建 Hexo 本地环境，需要安装 Node.js、Git 以及使用 npm 进行安装和配置。这对于毫无经验的新手来说，是一个很大的挑战。同时，由于这些环境的存在，导致如果需要更换计算机的时候，重新安装配置一个新的Hexo环境，又得花费一些功夫。</p><p>所以呢，锵锵，我们整合了一个 Hexo 便携版，来简化本地环境的部署。</p><span id="more"></span><p><strong>版本介绍</strong><br>那么所谓的便携版到底是什么？便携版就是将 Hexo 本地环境所需要的各种依赖环境的整合到一起，做成的不需要安装的版本。</p><p>本便携版（Release 1.0.0）所包含的软件如下：</p><blockquote><ul><li>Git: 2.7.4</li><li>Nodejs: 6.10.1</li><li>Npm: 4.4.1</li><li>Hexo: 3.2.2</li></ul></blockquote><p>为了便携的需要，不能配置固定的环境变量，所以除此之外还有相应的批处理文件，下文将详细介绍。</p><p><strong>从零开始，1分钟搭建Hexo写作环境</strong><br>说了这么多，我们这就开始教你如何在1分钟内，从零开始搭建Hexo写作环境！</p><p>1 注册一个Github帐号</p><p>1.1 进入<a href="https://github.com/">Github</a>，并在右边的3个框框中分别填写 用户名、邮箱地址、账户密码，并点击 <strong><code>Sign up for Github</code></strong>;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop2.png" alt="图1.1.1" loading="lazy"></p><p>1.2 进入欢迎页面后，点击**<code>Finish sign up</code>**;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop3.png" alt="图1.2.1" loading="lazy"></p><p>1.3 进入到这一步之后（<strong>图1.3.1</strong>），先别记着点任何东西，查看你的邮箱，应该会收到如下的邮件（<strong>图1.3.2</strong>），确认你的邮件。否则，你会看到错误页面（<strong>图1.3.3</strong>）。query完毕之后在<strong>图1.3.1</strong>所示的页面，点击**<code>+ New repository</code>**;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop5.png" alt="图1.3.1" loading="lazy"></p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop6.png" alt="图1.3.2" loading="lazy"></p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop7.png" alt="图1.3.3" loading="lazy"></p><p>1.4 请在红框中的 <strong><code>Repository name</code></strong> 里面输入 <strong><code>用户名.github.io</code></strong> ( <strong>用户名</strong> 就是你刚刚 <strong>步骤1.1</strong> 中注册的用户名)，然后点击 <strong><code>Create repository</code></strong>;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop8.png" alt="图1.4.1" loading="lazy"></p><p>1.5 至此，Github网页注册的部分完毕</p><p>2 下载HEXO Portable</p><p>2.1 访问我们的 <a href="https://project.bitmoe.cn/PortableHexo/">HEXO Portable</a> 页面，或者 <a href="https://github.com/Bitmoe/PortableHexo">Github仓库</a> 下载最新的便携版；</p><p>2.2 双击得到的自解压文件，解压到你需要安装博客的地方，可以选择硬盘或者U盘；</p><p>3 配置你的环境</p><p>3.1 在你的博客的文件夹，你会发现很多批处理文件，我先介绍下各个文件的用途：</p><blockquote><ul><li>配置基本信息 &gt;&gt; 配置博客的基本环境</li><li>配置Github部署 &gt;&gt; 配置博客的部署</li><li>启动命令行 &gt;&gt; 启动带环境变量的Git-Bash，否则无法使用node、npm、git等命令</li><li>新建文章 &gt;&gt; 新建一篇文章</li><li>渲染并本地测试 &gt;&gt; 生成并本地预览</li><li>渲染并部署 &gt;&gt; 生成并部署到GitHub</li><li>重置配置文件 &gt;&gt; 重置_config.yml</li></ul></blockquote><p>3.2 我们继续进行环境配置，双击**<code>配置基本信息</code>**并按顺序输入以下信息：</p><blockquote><ul><li>主标题：顾名思义</li><li>副标题：顾名思义</li><li>描述：顾名思义</li><li>作者：顾名思义</li><li>网站地址：填写 <strong>用户名.github.io</strong> （此处的用户名为<strong>步骤1.1</strong>中填写的用户名）</li></ul><p><strong>如果您已经购买了域名，可以参看相关的文章！</strong></p></blockquote><p>3.3 双击**<code>配置Github部署</code>**并按顺序输入以下信息：</p><blockquote><ul><li>Github的用户名：此处的用户名为<strong>步骤1.1</strong>中填写的用户名</li><li>Github注册邮箱：此处的注册邮箱为<strong>步骤1.1</strong>中填写的注册邮箱</li></ul></blockquote><p>3.4 输入完毕之后，会进行测试部署，等待屏幕提示<strong>下面将进行部署测试，稍后将有一个openssh的对话框出现，请输入你的github用户密码。</strong>的时候，按回车继续；（此处的用户密码为<strong>步骤1.1</strong>中填写的用户密码）</p><p>3.5 然后继续等待，此时屏幕会出现n多行，耐心等待即可；</p><p>3.6 等待屏幕提示<strong>请访问 https://用户名.github.io 查看是否部署成功！</strong>的时候，在浏览器中输入<strong>https://用户名.github.io <strong>，理论上可以看到你的Hexo站点！（此处的用户名为</strong>步骤1.1</strong>中填写的用户名）</p><p>3.7 至此，你的Hexo环境就配置完成了，这样你的这个Hexo博客文件夹无论移动到哪一台电脑，都能通过<strong>启动命令行</strong>出现的bash命令行，或者其余便捷的批处理文件比如<strong>新建文章</strong>、<strong>渲染并本地测试</strong>、<strong>渲染并部署</strong>进行相应的操作。</p><p>3.8 如果你在配置中出错，可以运行<strong>重置配置文件</strong>后，再重复<strong>3.1~3.6步骤</strong></p><p>4 开始享受纯粹的Hexo写作吧！</p><p>5 备注</p><blockquote><ul><li>本便携版以及本文均使用 <a href="https://creativecommons.org/licenses/by/4.0/">CC BY-NC-SA 4.0</a>协议；</li><li>本文所有权归 <a href="http://qistchan.com/">QistChan</a> &amp; <a href="https://wwww.bitmoe.com/">Bitmoe Inc.</a> 所有；</li><li>本便携版由 <a href="https://www.bitmoe.com/">Bitmoe Inc.</a> 维护并提供技术支持；</li><li>需要技术支持可以在<a href="https://github.com/Bitmoe/PortableHexo">Github仓库</a> 提交**<code>Issues</code>**；</li><li> Written with <a href="https://stackedit.io/">StackEdit</a>.</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
